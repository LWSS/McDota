// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcdota.proto

#include "mcdota.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tip_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAClientMsg_TipAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_TipAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_TipAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_TipAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_TipAlertDefaultTypeInternal _CDOTAClientMsg_TipAlert_default_instance_;
constexpr CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCLCMsg_SplitPlayerConnectDefaultTypeInternal {
  constexpr CCLCMsg_SplitPlayerConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_SplitPlayerConnectDefaultTypeInternal() {}
  union {
    CCLCMsg_SplitPlayerConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_SplitPlayerConnectDefaultTypeInternal _CCLCMsg_SplitPlayerConnect_default_instance_;
constexpr CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal {
  constexpr CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EventCNY2015Cmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal _CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
constexpr CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announce_wager_(false){}
struct CDOTAClientMsg_RankWagerDefaultTypeInternal {
  constexpr CDOTAClientMsg_RankWagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RankWagerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RankWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RankWagerDefaultTypeInternal _CDOTAClientMsg_RankWager_default_instance_;
constexpr CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recipient_player_id_(0u){}
struct CDOTAClientMsg_EventPointsTipDefaultTypeInternal {
  constexpr CDOTAClientMsg_EventPointsTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EventPointsTipDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EventPointsTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EventPointsTipDefaultTypeInternal _CDOTAClientMsg_EventPointsTip_default_instance_;
constexpr CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wager_amount_(0u){}
struct CDOTAClientMsg_CoinWagerDefaultTypeInternal {
  constexpr CDOTAClientMsg_CoinWagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_CoinWagerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_CoinWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_CoinWagerDefaultTypeInternal _CDOTAClientMsg_CoinWager_default_instance_;
constexpr CMsg_CVars_CVar::CMsg_CVars_CVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsg_CVars_CVarDefaultTypeInternal {
  constexpr CMsg_CVars_CVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsg_CVars_CVarDefaultTypeInternal() {}
  union {
    CMsg_CVars_CVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsg_CVars_CVarDefaultTypeInternal _CMsg_CVars_CVar_default_instance_;
constexpr CMsg_CVars::CMsg_CVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cvars_(){}
struct CMsg_CVarsDefaultTypeInternal {
  constexpr CMsg_CVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsg_CVarsDefaultTypeInternal() {}
  union {
    CMsg_CVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsg_CVarsDefaultTypeInternal _CMsg_CVars_default_instance_;
constexpr CNETMsg_SetConVar::CNETMsg_SetConVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convars_(nullptr){}
struct CNETMsg_SetConVarDefaultTypeInternal {
  constexpr CNETMsg_SetConVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SetConVarDefaultTypeInternal() {}
  union {
    CNETMsg_SetConVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SetConVarDefaultTypeInternal _CNETMsg_SetConVar_default_instance_;
constexpr CNETMsg_StringCmd::CNETMsg_StringCmd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CNETMsg_StringCmdDefaultTypeInternal {
  constexpr CNETMsg_StringCmdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_StringCmdDefaultTypeInternal() {}
  union {
    CNETMsg_StringCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_StringCmdDefaultTypeInternal _CNETMsg_StringCmd_default_instance_;
constexpr CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tgtpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0u)
  , y_(0u){}
struct CDOTAMsg_CoachHUDPingDefaultTypeInternal {
  constexpr CDOTAMsg_CoachHUDPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_CoachHUDPingDefaultTypeInternal _CDOTAMsg_CoachHUDPing_default_instance_;
constexpr CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hud_ping_(nullptr)
  , player_id_(0u){}
struct CDOTAUserMsg_CoachHUDPingDefaultTypeInternal {
  constexpr CDOTAUserMsg_CoachHUDPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CoachHUDPingDefaultTypeInternal _CDOTAUserMsg_CoachHUDPing_default_instance_;
constexpr CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_(0u)
  , force_recalculate_(false){}
struct CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal {
  constexpr CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_GuideSelectOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal _CDOTAClientMsg_GuideSelectOption_default_instance_;
constexpr CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guide_workshop_id_(PROTOBUF_ULONGLONG(0))
  , is_plus_guide_(false){}
struct CDOTAClientMsg_GuideSelectedDefaultTypeInternal {
  constexpr CDOTAClientMsg_GuideSelectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_GuideSelectedDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_GuideSelected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_GuideSelectedDefaultTypeInternal _CDOTAClientMsg_GuideSelected_default_instance_;
constexpr CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCLCMsg_CmdKeyValuesDefaultTypeInternal {
  constexpr CCLCMsg_CmdKeyValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_CmdKeyValuesDefaultTypeInternal() {}
  union {
    CCLCMsg_CmdKeyValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_CmdKeyValuesDefaultTypeInternal _CCLCMsg_CmdKeyValues_default_instance_;
constexpr CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_path_(0)
  , code_filename_(0)
  , crc_(0u){}
struct CCLCMsg_FileCRCCheckDefaultTypeInternal {
  constexpr CCLCMsg_FileCRCCheckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_FileCRCCheckDefaultTypeInternal() {}
  union {
    CCLCMsg_FileCRCCheck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_FileCRCCheckDefaultTypeInternal _CCLCMsg_FileCRCCheck_default_instance_;
constexpr CCLCMsg_ClientMessage::CCLCMsg_ClientMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_type_(0){}
struct CCLCMsg_ClientMessageDefaultTypeInternal {
  constexpr CCLCMsg_ClientMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_ClientMessageDefaultTypeInternal() {}
  union {
    CCLCMsg_ClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_ClientMessageDefaultTypeInternal _CCLCMsg_ClientMessage_default_instance_;
constexpr CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CDOTAClientMsg_MatchMetadataDefaultTypeInternal {
  constexpr CDOTAClientMsg_MatchMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_MatchMetadataDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_MatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_MatchMetadataDefaultTypeInternal _CDOTAClientMsg_MatchMetadata_default_instance_;
constexpr CSOEconItemAttribute::CSOEconItemAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , value_(0u){}
struct CSOEconItemAttributeDefaultTypeInternal {
  constexpr CSOEconItemAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemAttributeDefaultTypeInternal() {}
  union {
    CSOEconItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemAttributeDefaultTypeInternal _CSOEconItemAttribute_default_instance_;
constexpr CSOEconItemEquipped::CSOEconItemEquipped(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_class_(0u)
  , new_slot_(0u){}
struct CSOEconItemEquippedDefaultTypeInternal {
  constexpr CSOEconItemEquippedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemEquippedDefaultTypeInternal() {}
  union {
    CSOEconItemEquipped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemEquippedDefaultTypeInternal _CSOEconItemEquipped_default_instance_;
constexpr CSOEconItem::CSOEconItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_()
  , equipped_state_()
  , interior_item_(nullptr)
  , id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , inventory_(0u)
  , def_index_(0u)
  , flags_(0u)
  , origin_(0u)
  , style_(0u)
  , original_id_(PROTOBUF_ULONGLONG(0))
  , quality_(4u)
  , quantity_(1u)
  , level_(1u){}
struct CSOEconItemDefaultTypeInternal {
  constexpr CSOEconItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemDefaultTypeInternal() {}
  union {
    CSOEconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemDefaultTypeInternal _CSOEconItem_default_instance_;
constexpr CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_index_(0u)
  , is_supply_crate_(false)
  , is_timed_drop_(false)
  , account_id_(0u)
  , origin_(0u){}
struct CLobbyTimedRewardDetailsDefaultTypeInternal {
  constexpr CLobbyTimedRewardDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLobbyTimedRewardDetailsDefaultTypeInternal() {}
  union {
    CLobbyTimedRewardDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
constexpr CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_account_id_(0u)
  , target_account_id_(0u)
  , tip_amount_(0u)
  , event_id_(0)
{}
struct CMsgMatchTips_SingleTipDefaultTypeInternal {
  constexpr CMsgMatchTips_SingleTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchTips_SingleTipDefaultTypeInternal() {}
  union {
    CMsgMatchTips_SingleTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchTips_SingleTipDefaultTypeInternal _CMsgMatchTips_SingleTip_default_instance_;
constexpr CMsgMatchTips::CMsgMatchTips(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tips_(){}
struct CMsgMatchTipsDefaultTypeInternal {
  constexpr CMsgMatchTipsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchTipsDefaultTypeInternal() {}
  union {
    CMsgMatchTips _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchTipsDefaultTypeInternal _CMsgMatchTips_default_instance_;
constexpr CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_queue_time_(0u)
  , maximum_queue_time_(0u)
  , behavior_score_variance_(0)
{}
struct CMsgMatchMatchmakingStatsDefaultTypeInternal {
  constexpr CMsgMatchMatchmakingStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchMatchmakingStatsDefaultTypeInternal() {}
  union {
    CMsgMatchMatchmakingStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchMatchmakingStatsDefaultTypeInternal _CMsgMatchMatchmakingStats_default_instance_;
constexpr CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victim_slot_(0u)
  , count_(0u){}
struct CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_PlayerKill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
constexpr CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(0u)
  , purchase_time_(0){}
struct CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
constexpr CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_()
  , game_time_(0)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , level_(0u){}
struct CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_InventorySnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
constexpr CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_token_(0u)
  , value_(0){}
struct CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_AutoStyleCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
constexpr CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kill_eater_type_(0u)
  , gem_item_def_index_(0u)
  , required_hero_id_(0u)
  , starting_value_(0u)
  , ending_value_(0u)
  , owner_item_def_index_(0u)
  , owner_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_StrangeGemProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
constexpr CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , item_def_index_(0u)
  , starting_value_(0u)
  , is_victory_(false){}
struct CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_VictoryPrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
constexpr CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_id_(0u)
  , start_value_(0u)
  , end_value_(0u)
  , completed_(false){}
struct CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_SubChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
constexpr CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completed_path_id_(0u)
  , claimed_room_id_(0u){}
struct CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_CavernChallengeResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal _CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_;
constexpr CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(0u)
  , quantity_(0u)
  , audit_(0u){}
struct CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ActionGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_ActionGrant_default_instance_;
constexpr CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sub_challenges_with_progress_()
  , cavern_challenge_map_results_()
  , actions_granted_()
  , event_id_(0u)
  , event_points_(0u)
  , challenge_instance_id_(0u)
  , challenge_quest_id_(0u)
  , challenge_quest_challenge_id_(0u)
  , challenge_rank_completed_(0u)
  , challenge_rank_previously_completed_(0u)
  , challenge_completed_(false)
  , event_owned_(false)
  , cavern_challenge_active_(false)
  , wager_winnings_(0u)
  , cavern_challenge_winnings_(0u)
  , amount_wagered_(0u)
  , team_wager_amount_(0u)
  , periodic_point_adjustments_(0u)
  , cavern_challenge_plus_shard_winnings_(0u){}
struct CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_EventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal _CDOTAMatchMetadata_Team_EventData_default_instance_;
constexpr CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_upgrades_()
  , equipped_econ_items_()
  , kills_()
  , items_()
  , level_up_times_()
  , graph_net_worth_()
  , inventory_snapshot_()
  , auto_style_criteria_()
  , event_data_()
  , strange_gem_progress_()
  , victory_prediction_()
  , account_id_(0u)
  , player_slot_(0u)
  , avg_kills_x16_(0u)
  , avg_deaths_x16_(0u)
  , avg_assists_x16_(0u)
  , avg_gpm_x16_(0u)
  , avg_xpm_x16_(0u)
  , best_kills_x16_(0u)
  , best_assists_x16_(0u)
  , best_gpm_x16_(0u)
  , best_xpm_x16_(0u)
  , win_streak_(0u)
  , best_win_streak_(0u)
  , fight_score_(0)
  , farm_score_(0)
  , support_score_(0)
  , push_score_(0)
  , avg_stats_calibrated_(false)
  , hero_xp_(0u)
  , camps_stacked_(0u)
  , lane_selection_flags_(0u)
  , rampages_(0u)
  , triple_kills_(0u)
  , aegis_snatched_(0u)
  , rapiers_purchased_(0u)
  , couriers_killed_(0u)
  , net_worth_rank_(0u)
  , support_gold_spent_(0u)
  , observer_wards_placed_(0u)
  , sentry_wards_placed_(0u)
  , wards_dewarded_(0u)
  , stun_duration_(0)
  , rank_mmr_boost_type_(0)
{}
struct CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_default_instance_;
constexpr CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , graph_experience_()
  , graph_gold_earned_()
  , graph_net_worth_()
  , cm_bans_()
  , cm_picks_()
  , dota_team_(0u)
  , cm_first_pick_(false)
  , cm_captain_player_id_(0u)
  , cm_penalty_(0u){}
struct CDOTAMatchMetadata_TeamDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_TeamDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_TeamDefaultTypeInternal _CDOTAMatchMetadata_Team_default_instance_;
constexpr CDOTAMatchMetadata::CDOTAMatchMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , item_rewards_()
  , match_tips_()
  , event_game_custom_table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , matchmaking_stats_(nullptr)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , report_until_time_(PROTOBUF_ULONGLONG(0))
  , primary_event_id_(0u){}
struct CDOTAMatchMetadataDefaultTypeInternal {
  constexpr CDOTAMatchMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadataDefaultTypeInternal _CDOTAMatchMetadata_default_instance_;
constexpr CDOTAClientMsg_ChatMessage::CDOTAClientMsg_ChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_type_(0u){}
struct CDOTAClientMsg_ChatMessageDefaultTypeInternal {
  constexpr CDOTAClientMsg_ChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_ChatMessageDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_ChatMessageDefaultTypeInternal _CDOTAClientMsg_ChatMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mcdota_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mcdota_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mcdota_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mcdota_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, tip_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, playername_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, announce_wager_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, recipient_player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, wager_amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, name_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, cvars_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, convars_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, command_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, tgtpath_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, hud_ping_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, option_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, force_recalculate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, guide_workshop_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, is_plus_guide_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, code_path_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, path_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, code_filename_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, filename_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, crc_),
  2,
  0,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, metadata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_bytes_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_class_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, inventory_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, level_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quality_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, flags_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, origin_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, attribute_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, interior_item_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, style_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, original_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, equipped_state_),
  1,
  2,
  3,
  4,
  10,
  11,
  9,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, is_supply_crate_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, is_timed_drop_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, account_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, origin_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, source_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, tip_amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, event_id_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips, tips_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, average_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, maximum_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, behavior_score_variance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, victim_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, game_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, assists_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, level_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, kill_eater_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, gem_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, required_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, ending_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, is_victory_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, start_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, end_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, completed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, completed_path_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, claimed_room_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, action_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, quantity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, audit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_points_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_quest_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_quest_challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_rank_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_rank_previously_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_owned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, sub_challenges_with_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, wager_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_active_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, amount_wagered_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, team_wager_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, periodic_point_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_map_results_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_plus_shard_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, actions_granted_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  8,
  ~0u,
  10,
  9,
  11,
  12,
  13,
  14,
  ~0u,
  15,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, equipped_econ_items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, fight_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, farm_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, support_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, push_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, level_up_times_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, inventory_snapshot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_stats_calibrated_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, auto_style_criteria_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, event_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, strange_gem_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, hero_xp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, victory_prediction_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rampages_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, aegis_snatched_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rapiers_purchased_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, net_worth_rank_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, support_gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, sentry_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, wards_dewarded_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rank_mmr_boost_type_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  ~0u,
  ~0u,
  ~0u,
  18,
  19,
  ~0u,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, dota_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_experience_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_gold_earned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_first_pick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_captain_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_bans_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_picks_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_penalty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, teams_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, item_rewards_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, report_until_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, event_game_custom_table_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, match_tips_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, matchmaking_stats_),
  ~0u,
  ~0u,
  2,
  3,
  0,
  4,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_ChatMessage, message_text_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CDOTAClientMsg_TipAlert)},
  { 7, 13, sizeof(::CCLCMsg_SplitPlayerConnect)},
  { 14, 20, sizeof(::CDOTAClientMsg_EventCNY2015Cmd)},
  { 21, 27, sizeof(::CDOTAClientMsg_RankWager)},
  { 28, 34, sizeof(::CDOTAClientMsg_EventPointsTip)},
  { 35, 41, sizeof(::CDOTAClientMsg_CoinWager)},
  { 42, 49, sizeof(::CMsg_CVars_CVar)},
  { 51, -1, sizeof(::CMsg_CVars)},
  { 57, 63, sizeof(::CNETMsg_SetConVar)},
  { 64, 70, sizeof(::CNETMsg_StringCmd)},
  { 71, 79, sizeof(::CDOTAMsg_CoachHUDPing)},
  { 82, 89, sizeof(::CDOTAUserMsg_CoachHUDPing)},
  { 91, 98, sizeof(::CDOTAClientMsg_GuideSelectOption)},
  { 100, 107, sizeof(::CDOTAClientMsg_GuideSelected)},
  { 109, 115, sizeof(::CCLCMsg_CmdKeyValues)},
  { 116, 126, sizeof(::CCLCMsg_FileCRCCheck)},
  { 131, 138, sizeof(::CCLCMsg_ClientMessage)},
  { 140, 147, sizeof(::CDOTAClientMsg_MatchMetadata)},
  { 149, 157, sizeof(::CSOEconItemAttribute)},
  { 160, 167, sizeof(::CSOEconItemEquipped)},
  { 169, 188, sizeof(::CSOEconItem)},
  { 202, 212, sizeof(::CLobbyTimedRewardDetails)},
  { 217, 226, sizeof(::CMsgMatchTips_SingleTip)},
  { 230, -1, sizeof(::CMsgMatchTips)},
  { 236, 244, sizeof(::CMsgMatchMatchmakingStats)},
  { 247, 254, sizeof(::CDOTAMatchMetadata_Team_PlayerKill)},
  { 256, 263, sizeof(::CDOTAMatchMetadata_Team_ItemPurchase)},
  { 265, 276, sizeof(::CDOTAMatchMetadata_Team_InventorySnapshot)},
  { 282, 289, sizeof(::CDOTAMatchMetadata_Team_AutoStyleCriteria)},
  { 291, 303, sizeof(::CDOTAMatchMetadata_Team_StrangeGemProgress)},
  { 310, 319, sizeof(::CDOTAMatchMetadata_Team_VictoryPrediction)},
  { 323, 332, sizeof(::CDOTAMatchMetadata_Team_SubChallenge)},
  { 336, 343, sizeof(::CDOTAMatchMetadata_Team_CavernChallengeResult)},
  { 345, 353, sizeof(::CDOTAMatchMetadata_Team_ActionGrant)},
  { 356, 380, sizeof(::CDOTAMatchMetadata_Team_EventData)},
  { 399, 448, sizeof(::CDOTAMatchMetadata_Team_Player)},
  { 492, 507, sizeof(::CDOTAMatchMetadata_Team)},
  { 517, 530, sizeof(::CDOTAMatchMetadata)},
  { 538, 545, sizeof(::CDOTAClientMsg_ChatMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_TipAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_SplitPlayerConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EventCNY2015Cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RankWager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EventPointsTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_CoinWager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsg_CVars_CVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsg_CVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SetConVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_StringCmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_GuideSelectOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_GuideSelected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_CmdKeyValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_FileCRCCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_MatchMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemEquipped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLobbyTimedRewardDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchTips_SingleTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchTips_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchMatchmakingStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_PlayerKill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_SubChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_ActionGrant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_EventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_ChatMessage_default_instance_),
};

const char descriptor_table_protodef_mcdota_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014mcdota.proto\"+\n\027CDOTAClientMsg_TipAler"
  "t\022\020\n\010tip_text\030\001 \001(\t\"0\n\032CCLCMsg_SplitPlay"
  "erConnect\022\022\n\nplayername\030\001 \001(\t\".\n\036CDOTACl"
  "ientMsg_EventCNY2015Cmd\022\014\n\004data\030\001 \001(\014\"2\n"
  "\030CDOTAClientMsg_RankWager\022\026\n\016announce_wa"
  "ger\030\001 \001(\010\"<\n\035CDOTAClientMsg_EventPointsT"
  "ip\022\033\n\023recipient_player_id\030\001 \001(\r\"0\n\030CDOTA"
  "ClientMsg_CoinWager\022\024\n\014wager_amount\030\001 \001("
  "\r\"R\n\nCMsg_CVars\022\037\n\005cvars\030\001 \003(\0132\020.CMsg_CV"
  "ars.CVar\032#\n\004CVar\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t\"1\n\021CNETMsg_SetConVar\022\034\n\007convars\030\001 "
  "\001(\0132\013.CMsg_CVars\"$\n\021CNETMsg_StringCmd\022\017\n"
  "\007command\030\001 \001(\t\">\n\025CDOTAMsg_CoachHUDPing\022"
  "\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\017\n\007tgtpath\030\003 \001(\t\"X"
  "\n\031CDOTAUserMsg_CoachHUDPing\022\021\n\tplayer_id"
  "\030\001 \001(\r\022(\n\010hud_ping\030\002 \001(\0132\026.CDOTAMsg_Coac"
  "hHUDPing\"M\n CDOTAClientMsg_GuideSelectOp"
  "tion\022\016\n\006option\030\001 \001(\r\022\031\n\021force_recalculat"
  "e\030\002 \001(\010\"P\n\034CDOTAClientMsg_GuideSelected\022"
  "\031\n\021guide_workshop_id\030\001 \001(\004\022\025\n\ris_plus_gu"
  "ide\030\002 \001(\010\"$\n\024CCLCMsg_CmdKeyValues\022\014\n\004dat"
  "a\030\001 \001(\014\"m\n\024CCLCMsg_FileCRCCheck\022\021\n\tcode_"
  "path\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\025\n\rcode_filenam"
  "e\030\003 \001(\005\022\020\n\010filename\030\004 \001(\t\022\013\n\003crc\030\005 \001(\007\"7"
  "\n\025CCLCMsg_ClientMessage\022\020\n\010msg_type\030\001 \001("
  "\005\022\014\n\004data\030\002 \001(\014\"B\n\034CDOTAClientMsg_MatchM"
  "etadata\022\020\n\010match_id\030\001 \001(\004\022\020\n\010metadata\030\002 "
  "\001(\014\"M\n\024CSOEconItemAttribute\022\021\n\tdef_index"
  "\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\023\n\013value_bytes\030\003 \001"
  "(\014\":\n\023CSOEconItemEquipped\022\021\n\tnew_class\030\001"
  " \001(\r\022\020\n\010new_slot\030\002 \001(\r\"\332\002\n\013CSOEconItem\022\n"
  "\n\002id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001(\r\022\021\n\tinvent"
  "ory\030\003 \001(\r\022\021\n\tdef_index\030\004 \001(\r\022\023\n\010quantity"
  "\030\005 \001(\r:\0011\022\020\n\005level\030\006 \001(\r:\0011\022\022\n\007quality\030\007"
  " \001(\r:\0014\022\020\n\005flags\030\010 \001(\r:\0010\022\021\n\006origin\030\t \001("
  "\r:\0010\022(\n\tattribute\030\014 \003(\0132\025.CSOEconItemAtt"
  "ribute\022#\n\rinterior_item\030\r \001(\0132\014.CSOEconI"
  "tem\022\020\n\005style\030\017 \001(\r:\0010\022\026\n\013original_id\030\020 \001"
  "(\004:\0010\022,\n\016equipped_state\030\022 \003(\0132\024.CSOEconI"
  "temEquipped\"\206\001\n\030CLobbyTimedRewardDetails"
  "\022\026\n\016item_def_index\030\002 \001(\r\022\027\n\017is_supply_cr"
  "ate\030\003 \001(\010\022\025\n\ris_timed_drop\030\004 \001(\010\022\022\n\nacco"
  "unt_id\030\005 \001(\r\022\016\n\006origin\030\006 \001(\r\"\270\001\n\rCMsgMat"
  "chTips\022&\n\004tips\030\002 \003(\0132\030.CMsgMatchTips.Sin"
  "gleTip\032\177\n\tSingleTip\022\031\n\021source_account_id"
  "\030\001 \001(\r\022\031\n\021target_account_id\030\002 \001(\r\022\022\n\ntip"
  "_amount\030\003 \001(\r\022(\n\010event_id\030\004 \001(\0162\007.EEvent"
  ":\rEVENT_ID_NONE\"\271\001\n\031CMsgMatchMatchmaking"
  "Stats\022\032\n\022average_queue_time\030\001 \001(\r\022\032\n\022max"
  "imum_queue_time\030\002 \001(\r\022d\n\027behavior_score_"
  "variance\030\003 \001(\0162\034.EMatchBehaviorScoreVari"
  "ance:%k_EMatchBehaviorScoreVariance_Inva"
  "lid\"\320\033\n\022CDOTAMatchMetadata\022\'\n\005teams\030\001 \003("
  "\0132\030.CDOTAMatchMetadata.Team\022/\n\014item_rewa"
  "rds\030\002 \003(\0132\031.CLobbyTimedRewardDetails\022\020\n\010"
  "lobby_id\030\003 \001(\006\022\031\n\021report_until_time\030\004 \001("
  "\006\022\037\n\027event_game_custom_table\030\005 \001(\014\022\030\n\020pr"
  "imary_event_id\030\006 \001(\r\022\"\n\nmatch_tips\030\007 \003(\013"
  "2\016.CMsgMatchTips\0225\n\021matchmaking_stats\030\010 "
  "\001(\0132\032.CMsgMatchMatchmakingStats\032\234\031\n\004Team"
  "\022\021\n\tdota_team\030\001 \001(\r\0220\n\007players\030\002 \003(\0132\037.C"
  "DOTAMatchMetadata.Team.Player\022\030\n\020graph_e"
  "xperience\030\003 \003(\002\022\031\n\021graph_gold_earned\030\004 \003"
  "(\002\022\027\n\017graph_net_worth\030\005 \003(\002\022\025\n\rcm_first_"
  "pick\030\006 \001(\010\022\034\n\024cm_captain_player_id\030\007 \001(\r"
  "\022\017\n\007cm_bans\030\010 \003(\r\022\020\n\010cm_picks\030\t \003(\r\022\022\n\nc"
  "m_penalty\030\n \001(\r\0320\n\nPlayerKill\022\023\n\013victim_"
  "slot\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\0326\n\014ItemPurchas"
  "e\022\017\n\007item_id\030\001 \001(\r\022\025\n\rpurchase_time\030\002 \001("
  "\005\032v\n\021InventorySnapshot\022\017\n\007item_id\030\001 \003(\r\022"
  "\021\n\tgame_time\030\002 \001(\005\022\r\n\005kills\030\003 \001(\r\022\016\n\006dea"
  "ths\030\004 \001(\r\022\017\n\007assists\030\005 \001(\r\022\r\n\005level\030\006 \001("
  "\r\0326\n\021AutoStyleCriteria\022\022\n\nname_token\030\001 \001"
  "(\r\022\r\n\005value\030\002 \001(\002\032\306\001\n\022StrangeGemProgress"
  "\022\027\n\017kill_eater_type\030\001 \001(\r\022\032\n\022gem_item_de"
  "f_index\030\002 \001(\r\022\030\n\020required_hero_id\030\003 \001(\r\022"
  "\026\n\016starting_value\030\004 \001(\r\022\024\n\014ending_value\030"
  "\005 \001(\r\022\034\n\024owner_item_def_index\030\006 \001(\r\022\025\n\ro"
  "wner_item_id\030\007 \001(\004\032h\n\021VictoryPrediction\022"
  "\017\n\007item_id\030\001 \001(\004\022\026\n\016item_def_index\030\002 \001(\r"
  "\022\026\n\016starting_value\030\003 \001(\r\022\022\n\nis_victory\030\004"
  " \001(\010\032Z\n\014SubChallenge\022\017\n\007slot_id\030\001 \001(\r\022\023\n"
  "\013start_value\030\002 \001(\r\022\021\n\tend_value\030\003 \001(\r\022\021\n"
  "\tcompleted\030\004 \001(\010\032K\n\025CavernChallengeResul"
  "t\022\031\n\021completed_path_id\030\001 \001(\r\022\027\n\017claimed_"
  "room_id\030\002 \001(\r\032A\n\013ActionGrant\022\021\n\taction_i"
  "d\030\001 \001(\r\022\020\n\010quantity\030\002 \001(\r\022\r\n\005audit\030\003 \001(\r"
  "\032\330\005\n\tEventData\022\020\n\010event_id\030\001 \001(\r\022\024\n\014even"
  "t_points\030\002 \001(\r\022\035\n\025challenge_instance_id\030"
  "\003 \001(\r\022\032\n\022challenge_quest_id\030\004 \001(\r\022$\n\034cha"
  "llenge_quest_challenge_id\030\005 \001(\r\022\033\n\023chall"
  "enge_completed\030\006 \001(\010\022 \n\030challenge_rank_c"
  "ompleted\030\007 \001(\r\022+\n#challenge_rank_previou"
  "sly_completed\030\010 \001(\r\022\023\n\013event_owned\030\t \001(\010"
  "\022K\n\034sub_challenges_with_progress\030\n \003(\0132%"
  ".CDOTAMatchMetadata.Team.SubChallenge\022\026\n"
  "\016wager_winnings\030\013 \001(\r\022\037\n\027cavern_challeng"
  "e_active\030\014 \001(\010\022!\n\031cavern_challenge_winni"
  "ngs\030\r \001(\r\022\026\n\016amount_wagered\030\016 \001(\r\022\031\n\021tea"
  "m_wager_amount\030\017 \001(\r\022\"\n\032periodic_point_a"
  "djustments\030\020 \001(\r\022T\n\034cavern_challenge_map"
  "_results\030\021 \003(\0132..CDOTAMatchMetadata.Team"
  ".CavernChallengeResult\022,\n$cavern_challen"
  "ge_plus_shard_winnings\030\022 \001(\r\022=\n\017actions_"
  "granted\030\023 \003(\0132$.CDOTAMatchMetadata.Team."
  "ActionGrant\032\200\013\n\006Player\022\022\n\naccount_id\030\001 \001"
  "(\r\022\030\n\020ability_upgrades\030\002 \003(\r\022\023\n\013player_s"
  "lot\030\003 \001(\r\022)\n\023equipped_econ_items\030\004 \003(\0132\014"
  ".CSOEconItem\0222\n\005kills\030\005 \003(\0132#.CDOTAMatch"
  "Metadata.Team.PlayerKill\0224\n\005items\030\006 \003(\0132"
  "%.CDOTAMatchMetadata.Team.ItemPurchase\022\025"
  "\n\ravg_kills_x16\030\007 \001(\r\022\026\n\016avg_deaths_x16\030"
  "\010 \001(\r\022\027\n\017avg_assists_x16\030\t \001(\r\022\023\n\013avg_gp"
  "m_x16\030\n \001(\r\022\023\n\013avg_xpm_x16\030\013 \001(\r\022\026\n\016best"
  "_kills_x16\030\014 \001(\r\022\030\n\020best_assists_x16\030\r \001"
  "(\r\022\024\n\014best_gpm_x16\030\016 \001(\r\022\024\n\014best_xpm_x16"
  "\030\017 \001(\r\022\022\n\nwin_streak\030\020 \001(\r\022\027\n\017best_win_s"
  "treak\030\021 \001(\r\022\023\n\013fight_score\030\022 \001(\002\022\022\n\nfarm"
  "_score\030\023 \001(\002\022\025\n\rsupport_score\030\024 \001(\002\022\022\n\np"
  "ush_score\030\025 \001(\002\022\026\n\016level_up_times\030\026 \003(\r\022"
  "\027\n\017graph_net_worth\030\027 \003(\002\022F\n\022inventory_sn"
  "apshot\030\030 \003(\0132*.CDOTAMatchMetadata.Team.I"
  "nventorySnapshot\022\034\n\024avg_stats_calibrated"
  "\030\031 \001(\010\022G\n\023auto_style_criteria\030\032 \003(\0132*.CD"
  "OTAMatchMetadata.Team.AutoStyleCriteria\022"
  "6\n\nevent_data\030\035 \003(\0132\".CDOTAMatchMetadata"
  ".Team.EventData\022I\n\024strange_gem_progress\030"
  "\036 \003(\0132+.CDOTAMatchMetadata.Team.StrangeG"
  "emProgress\022\017\n\007hero_xp\030\037 \001(\r\022\025\n\rcamps_sta"
  "cked\030  \001(\r\022F\n\022victory_prediction\030! \003(\0132*"
  ".CDOTAMatchMetadata.Team.VictoryPredicti"
  "on\022\034\n\024lane_selection_flags\030\" \001(\r\022\020\n\010ramp"
  "ages\030# \001(\r\022\024\n\014triple_kills\030$ \001(\r\022\026\n\016aegi"
  "s_snatched\030% \001(\r\022\031\n\021rapiers_purchased\030& "
  "\001(\r\022\027\n\017couriers_killed\030\' \001(\r\022\026\n\016net_wort"
  "h_rank\030( \001(\r\022\032\n\022support_gold_spent\030) \001(\r"
  "\022\035\n\025observer_wards_placed\030* \001(\r\022\033\n\023sentr"
  "y_wards_placed\030+ \001(\r\022\026\n\016wards_dewarded\030,"
  " \001(\r\022\025\n\rstun_duration\030- \001(\002\022I\n\023rank_mmr_"
  "boost_type\030. \001(\0162\022.EDOTAMMRBoostType:\030k_"
  "EDOTAMMRBoostType_None\"H\n\032CDOTAClientMsg"
  "_ChatMessage\022\024\n\014channel_type\030\001 \001(\r\022\024\n\014me"
  "ssage_text\030\002 \001(\t*s\n\021EDOTAMMRBoostType\022\034\n"
  "\030k_EDOTAMMRBoostType_None\020\000\022\036\n\032k_EDOTAMM"
  "RBoostType_Leader\020\001\022 \n\034k_EDOTAMMRBoostTy"
  "pe_Follower\020\002*\337\006\n\006EEvent\022\021\n\rEVENT_ID_NON"
  "E\020\000\022\025\n\021EVENT_ID_DIRETIDE\020\001\022\034\n\030EVENT_ID_S"
  "PRING_FESTIVAL\020\002\022\033\n\027EVENT_ID_FROSTIVUS_2"
  "013\020\003\022\034\n\030EVENT_ID_COMPENDIUM_2014\020\004\022\032\n\026E"
  "VENT_ID_NEXON_PC_BANG\020\005\022\032\n\026EVENT_ID_PWRD"
  "_DAC_2015\020\006\022\033\n\027EVENT_ID_NEW_BLOOM_2015\020\007"
  "\022\037\n\033EVENT_ID_INTERNATIONAL_2015\020\010\022\034\n\030EVE"
  "NT_ID_FALL_MAJOR_2015\020\t\022\026\n\022EVENT_ID_ORAC"
  "LE_PA\020\n\022$\n EVENT_ID_NEW_BLOOM_2015_PREBE"
  "AST\020\013\022\026\n\022EVENT_ID_FROSTIVUS\020\014\022\036\n\032EVENT_I"
  "D_WINTER_MAJOR_2016\020\r\022\037\n\033EVENT_ID_INTERN"
  "ATIONAL_2016\020\016\022\034\n\030EVENT_ID_FALL_MAJOR_20"
  "16\020\017\022\036\n\032EVENT_ID_WINTER_MAJOR_2017\020\020\022\033\n\027"
  "EVENT_ID_NEW_BLOOM_2017\020\021\022\037\n\033EVENT_ID_IN"
  "TERNATIONAL_2017\020\022\022\036\n\032EVENT_ID_PLUS_SUBS"
  "CRIPTION\020\023\022\035\n\031EVENT_ID_SINGLES_DAY_2017\020"
  "\024\022\033\n\027EVENT_ID_FROSTIVUS_2017\020\025\022\037\n\033EVENT_"
  "ID_INTERNATIONAL_2018\020\026\022\033\n\027EVENT_ID_FROS"
  "TIVUS_2018\020\027\022\033\n\027EVENT_ID_NEW_BLOOM_2019\020"
  "\030\022\037\n\033EVENT_ID_INTERNATIONAL_2019\020\031\022\"\n\036EV"
  "ENT_ID_NEW_PLAYER_EXPERIENCE\020\032\022\033\n\027EVENT_"
  "ID_FROSTIVUS_2019\020\033\022\022\n\016EVENT_ID_COUNT\020\034*"
  "\301\001\n\033EMatchBehaviorScoreVariance\022)\n%k_EMa"
  "tchBehaviorScoreVariance_Invalid\020\000\022%\n!k_"
  "EMatchBehaviorScoreVariance_Low\020\001\022(\n$k_E"
  "MatchBehaviorScoreVariance_Medium\020\002\022&\n\"k"
  "_EMatchBehaviorScoreVariance_High\020\003B\005H\001\200"
  "\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mcdota_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mcdota_2eproto = {
  false, false, 6882, descriptor_table_protodef_mcdota_2eproto, "mcdota.proto", 
  &descriptor_table_mcdota_2eproto_once, nullptr, 0, 39,
  schemas, file_default_instances, TableStruct_mcdota_2eproto::offsets,
  file_level_metadata_mcdota_2eproto, file_level_enum_descriptors_mcdota_2eproto, file_level_service_descriptors_mcdota_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_mcdota_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mcdota_2eproto);
  return descriptor_table_mcdota_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mcdota_2eproto(&descriptor_table_mcdota_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAMMRBoostType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mcdota_2eproto);
  return file_level_enum_descriptors_mcdota_2eproto[0];
}
bool EDOTAMMRBoostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mcdota_2eproto);
  return file_level_enum_descriptors_mcdota_2eproto[1];
}
bool EEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchBehaviorScoreVariance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mcdota_2eproto);
  return file_level_enum_descriptors_mcdota_2eproto[2];
}
bool EMatchBehaviorScoreVariance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAClientMsg_TipAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_TipAlert>()._has_bits_);
  static void set_has_tip_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_TipAlert)
}
CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(const CDOTAClientMsg_TipAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tip_text()) {
    tip_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TipAlert)
}

void CDOTAClientMsg_TipAlert::SharedCtor() {
tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_TipAlert::~CDOTAClientMsg_TipAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TipAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_TipAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tip_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_TipAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_TipAlert* _this = reinterpret_cast< CDOTAClientMsg_TipAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_TipAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_TipAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_TipAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_TipAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tip_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_TipAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tip_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tip_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_TipAlert.tip_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_TipAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TipAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tip_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_text().data(), static_cast<int>(this->_internal_tip_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_TipAlert.tip_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tip_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TipAlert)
  return target;
}

size_t CDOTAClientMsg_TipAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_TipAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tip_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tip_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_TipAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_TipAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_TipAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_TipAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_TipAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TipAlert::MergeFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tip_text()) {
    _internal_set_tip_text(from._internal_tip_text());
  }
}

void CDOTAClientMsg_TipAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TipAlert::CopyFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TipAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TipAlert::InternalSwap(CDOTAClientMsg_TipAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tip_text_.Swap(&other->tip_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_TipAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCLCMsg_SplitPlayerConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_SplitPlayerConnect>()._has_bits_);
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_SplitPlayerConnect)
}
CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(const CCLCMsg_SplitPlayerConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_playername()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_SplitPlayerConnect)
}

void CCLCMsg_SplitPlayerConnect::SharedCtor() {
playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCLCMsg_SplitPlayerConnect::~CCLCMsg_SplitPlayerConnect() {
  // @@protoc_insertion_point(destructor:CCLCMsg_SplitPlayerConnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCLCMsg_SplitPlayerConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_SplitPlayerConnect::ArenaDtor(void* object) {
  CCLCMsg_SplitPlayerConnect* _this = reinterpret_cast< CCLCMsg_SplitPlayerConnect* >(object);
  (void)_this;
}
void CCLCMsg_SplitPlayerConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_SplitPlayerConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_SplitPlayerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_SplitPlayerConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playername_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_SplitPlayerConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string playername = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCLCMsg_SplitPlayerConnect.playername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCLCMsg_SplitPlayerConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_SplitPlayerConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playername = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCLCMsg_SplitPlayerConnect.playername");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_SplitPlayerConnect)
  return target;
}

size_t CCLCMsg_SplitPlayerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_SplitPlayerConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string playername = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCLCMsg_SplitPlayerConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_SplitPlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_SplitPlayerConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCLCMsg_SplitPlayerConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_SplitPlayerConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_SplitPlayerConnect)
    MergeFrom(*source);
  }
}

void CCLCMsg_SplitPlayerConnect::MergeFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_SplitPlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playername()) {
    _internal_set_playername(from._internal_playername());
  }
}

void CCLCMsg_SplitPlayerConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_SplitPlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_SplitPlayerConnect::CopyFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_SplitPlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_SplitPlayerConnect::IsInitialized() const {
  return true;
}

void CCLCMsg_SplitPlayerConnect::InternalSwap(CCLCMsg_SplitPlayerConnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_SplitPlayerConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_EventCNY2015Cmd::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EventCNY2015Cmd>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}
CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventCNY2015Cmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_EventCNY2015Cmd::ArenaDtor(void* object) {
  CDOTAClientMsg_EventCNY2015Cmd* _this = reinterpret_cast< CDOTAClientMsg_EventCNY2015Cmd* >(object);
  (void)_this;
}
void CDOTAClientMsg_EventCNY2015Cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EventCNY2015Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EventCNY2015Cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_EventCNY2015Cmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventCNY2015Cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

size_t CDOTAClientMsg_EventCNY2015Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EventCNY2015Cmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventCNY2015Cmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_EventCNY2015Cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_EventCNY2015Cmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_EventCNY2015Cmd)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_RankWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_RankWager>()._has_bits_);
  static void set_has_announce_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RankWager)
}
CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(const CDOTAClientMsg_RankWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announce_wager_ = from.announce_wager_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RankWager)
}

void CDOTAClientMsg_RankWager::SharedCtor() {
announce_wager_ = false;
}

CDOTAClientMsg_RankWager::~CDOTAClientMsg_RankWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RankWager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_RankWager::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_RankWager::ArenaDtor(void* object) {
  CDOTAClientMsg_RankWager* _this = reinterpret_cast< CDOTAClientMsg_RankWager* >(object);
  (void)_this;
}
void CDOTAClientMsg_RankWager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RankWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RankWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RankWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  announce_wager_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RankWager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool announce_wager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_announce_wager(&has_bits);
          announce_wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_RankWager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RankWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool announce_wager = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_announce_wager(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RankWager)
  return target;
}

size_t CDOTAClientMsg_RankWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RankWager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool announce_wager = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_RankWager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RankWager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_RankWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_RankWager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_RankWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RankWager::MergeFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_announce_wager()) {
    _internal_set_announce_wager(from._internal_announce_wager());
  }
}

void CDOTAClientMsg_RankWager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RankWager::CopyFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RankWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RankWager::InternalSwap(CDOTAClientMsg_RankWager* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(announce_wager_, other->announce_wager_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RankWager::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_EventPointsTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EventPointsTip>()._has_bits_);
  static void set_has_recipient_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EventPointsTip)
}
CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_player_id_ = from.recipient_player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventPointsTip)
}

void CDOTAClientMsg_EventPointsTip::SharedCtor() {
recipient_player_id_ = 0u;
}

CDOTAClientMsg_EventPointsTip::~CDOTAClientMsg_EventPointsTip() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventPointsTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_EventPointsTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_EventPointsTip::ArenaDtor(void* object) {
  CDOTAClientMsg_EventPointsTip* _this = reinterpret_cast< CDOTAClientMsg_EventPointsTip* >(object);
  (void)_this;
}
void CDOTAClientMsg_EventPointsTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EventPointsTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EventPointsTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EventPointsTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EventPointsTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 recipient_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recipient_player_id(&has_bits);
          recipient_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_EventPointsTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventPointsTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recipient_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventPointsTip)
  return target;
}

size_t CDOTAClientMsg_EventPointsTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EventPointsTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 recipient_player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recipient_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventPointsTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_EventPointsTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_EventPointsTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_EventPointsTip)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recipient_player_id()) {
    _internal_set_recipient_player_id(from._internal_recipient_player_id());
  }
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventPointsTip::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventPointsTip::InternalSwap(CDOTAClientMsg_EventPointsTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recipient_player_id_, other->recipient_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EventPointsTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_CoinWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_CoinWager>()._has_bits_);
  static void set_has_wager_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_CoinWager)
}
CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wager_amount_ = from.wager_amount_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::SharedCtor() {
wager_amount_ = 0u;
}

CDOTAClientMsg_CoinWager::~CDOTAClientMsg_CoinWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoinWager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_CoinWager::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_CoinWager::ArenaDtor(void* object) {
  CDOTAClientMsg_CoinWager* _this = reinterpret_cast< CDOTAClientMsg_CoinWager* >(object);
  (void)_this;
}
void CDOTAClientMsg_CoinWager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_CoinWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_CoinWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_CoinWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wager_amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_CoinWager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 wager_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wager_amount(&has_bits);
          wager_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_CoinWager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoinWager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wager_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wager_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoinWager)
  return target;
}

size_t CDOTAClientMsg_CoinWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_CoinWager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 wager_amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wager_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_CoinWager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_CoinWager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_CoinWager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_CoinWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWager::MergeFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wager_amount()) {
    _internal_set_wager_amount(from._internal_wager_amount());
  }
}

void CDOTAClientMsg_CoinWager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWager::CopyFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWager::InternalSwap(CDOTAClientMsg_CoinWager* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wager_amount_, other->wager_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_CoinWager::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsg_CVars_CVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsg_CVars_CVar>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsg_CVars_CVar::CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars.CVar)
}
CMsg_CVars_CVar::CMsg_CVars_CVar(const CMsg_CVars_CVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars.CVar)
}

void CMsg_CVars_CVar::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsg_CVars_CVar::~CMsg_CVars_CVar() {
  // @@protoc_insertion_point(destructor:CMsg_CVars.CVar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsg_CVars_CVar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsg_CVars_CVar::ArenaDtor(void* object) {
  CMsg_CVars_CVar* _this = reinterpret_cast< CMsg_CVars_CVar* >(object);
  (void)_this;
}
void CMsg_CVars_CVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsg_CVars_CVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsg_CVars_CVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars.CVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars_CVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsg_CVars.CVar.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsg_CVars.CVar.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsg_CVars_CVar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars.CVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars.CVar)
  return target;
}

size_t CMsg_CVars_CVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars.CVar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsg_CVars_CVar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars_CVar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsg_CVars_CVar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars.CVar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars.CVar)
    MergeFrom(*source);
  }
}

void CMsg_CVars_CVar::MergeFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CMsg_CVars_CVar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars_CVar::CopyFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars_CVar::IsInitialized() const {
  return true;
}

void CMsg_CVars_CVar::InternalSwap(CMsg_CVars_CVar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars_CVar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsg_CVars::_Internal {
 public:
};

CMsg_CVars::CMsg_CVars(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cvars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars)
}
CMsg_CVars::CMsg_CVars(const CMsg_CVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cvars_(from.cvars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars)
}

void CMsg_CVars::SharedCtor() {
}

CMsg_CVars::~CMsg_CVars() {
  // @@protoc_insertion_point(destructor:CMsg_CVars)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsg_CVars::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsg_CVars::ArenaDtor(void* object) {
  CMsg_CVars* _this = reinterpret_cast< CMsg_CVars* >(object);
  (void)_this;
}
void CMsg_CVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsg_CVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsg_CVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cvars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsg_CVars.CVar cvars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cvars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsg_CVars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cvars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cvars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars)
  return target;
}

size_t CMsg_CVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  total_size += 1UL * this->_internal_cvars_size();
  for (const auto& msg : this->cvars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsg_CVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsg_CVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars)
    MergeFrom(*source);
  }
}

void CMsg_CVars::MergeFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cvars_.MergeFrom(from.cvars_);
}

void CMsg_CVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars::CopyFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars::IsInitialized() const {
  return true;
}

void CMsg_CVars::InternalSwap(CMsg_CVars* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cvars_.InternalSwap(&other->cvars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_SetConVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SetConVar>()._has_bits_);
  static const ::CMsg_CVars& convars(const CNETMsg_SetConVar* msg);
  static void set_has_convars(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsg_CVars&
CNETMsg_SetConVar::_Internal::convars(const CNETMsg_SetConVar* msg) {
  return *msg->convars_;
}
CNETMsg_SetConVar::CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SetConVar)
}
CNETMsg_SetConVar::CNETMsg_SetConVar(const CNETMsg_SetConVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_convars()) {
    convars_ = new ::CMsg_CVars(*from.convars_);
  } else {
    convars_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SetConVar)
}

void CNETMsg_SetConVar::SharedCtor() {
convars_ = nullptr;
}

CNETMsg_SetConVar::~CNETMsg_SetConVar() {
  // @@protoc_insertion_point(destructor:CNETMsg_SetConVar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_SetConVar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete convars_;
}

void CNETMsg_SetConVar::ArenaDtor(void* object) {
  CNETMsg_SetConVar* _this = reinterpret_cast< CNETMsg_SetConVar* >(object);
  (void)_this;
}
void CNETMsg_SetConVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SetConVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SetConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SetConVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(convars_ != nullptr);
    convars_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SetConVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsg_CVars convars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convars(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_SetConVar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SetConVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::convars(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SetConVar)
  return target;
}

size_t CNETMsg_SetConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SetConVar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsg_CVars convars = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convars_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_SetConVar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SetConVar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_SetConVar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SetConVar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SetConVar)
    MergeFrom(*source);
  }
}

void CNETMsg_SetConVar::MergeFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_convars()) {
    _internal_mutable_convars()->::CMsg_CVars::MergeFrom(from._internal_convars());
  }
}

void CNETMsg_SetConVar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SetConVar::CopyFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SetConVar::IsInitialized() const {
  return true;
}

void CNETMsg_SetConVar::InternalSwap(CNETMsg_SetConVar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(convars_, other->convars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SetConVar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CNETMsg_StringCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_StringCmd>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_StringCmd::CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_StringCmd)
}
CNETMsg_StringCmd::CNETMsg_StringCmd(const CNETMsg_StringCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_StringCmd)
}

void CNETMsg_StringCmd::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CNETMsg_StringCmd::~CNETMsg_StringCmd() {
  // @@protoc_insertion_point(destructor:CNETMsg_StringCmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CNETMsg_StringCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_StringCmd::ArenaDtor(void* object) {
  CNETMsg_StringCmd* _this = reinterpret_cast< CNETMsg_StringCmd* >(object);
  (void)_this;
}
void CNETMsg_StringCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_StringCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_StringCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_StringCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_StringCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_StringCmd.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNETMsg_StringCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_StringCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_StringCmd)
  return target;
}

size_t CNETMsg_StringCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_StringCmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNETMsg_StringCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_StringCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNETMsg_StringCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_StringCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_StringCmd)
    MergeFrom(*source);
  }
}

void CNETMsg_StringCmd::MergeFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_set_command(from._internal_command());
  }
}

void CNETMsg_StringCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_StringCmd::CopyFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_StringCmd::IsInitialized() const {
  return true;
}

void CNETMsg_StringCmd::InternalSwap(CNETMsg_StringCmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_StringCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_CoachHUDPing>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tgtpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_CoachHUDPing)
}
CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(const CDOTAMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tgtpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tgtpath()) {
    tgtpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tgtpath(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_CoachHUDPing)
}

void CDOTAMsg_CoachHUDPing::SharedCtor() {
tgtpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CDOTAMsg_CoachHUDPing::~CDOTAMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_CoachHUDPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tgtpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMsg_CoachHUDPing::ArenaDtor(void* object) {
  CDOTAMsg_CoachHUDPing* _this = reinterpret_cast< CDOTAMsg_CoachHUDPing* >(object);
  (void)_this;
}
void CDOTAMsg_CoachHUDPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_CoachHUDPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tgtpath_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_CoachHUDPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tgtpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tgtpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMsg_CoachHUDPing.tgtpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMsg_CoachHUDPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional string tgtpath = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tgtpath().data(), static_cast<int>(this->_internal_tgtpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_CoachHUDPing.tgtpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tgtpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_CoachHUDPing)
  return target;
}

size_t CDOTAMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_CoachHUDPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tgtpath = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tgtpath());
    }

    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMsg_CoachHUDPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_CoachHUDPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMsg_CoachHUDPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMsg_CoachHUDPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMsg_CoachHUDPing)
    MergeFrom(*source);
  }
}

void CDOTAMsg_CoachHUDPing::MergeFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tgtpath(from._internal_tgtpath());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_CoachHUDPing::InternalSwap(CDOTAMsg_CoachHUDPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tgtpath_.Swap(&other->tgtpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, y_)
      + sizeof(CDOTAMsg_CoachHUDPing::y_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_CoachHUDPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CoachHUDPing>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_CoachHUDPing& hud_ping(const CDOTAUserMsg_CoachHUDPing* msg);
  static void set_has_hud_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_CoachHUDPing&
CDOTAUserMsg_CoachHUDPing::_Internal::hud_ping(const CDOTAUserMsg_CoachHUDPing* msg) {
  return *msg->hud_ping_;
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CoachHUDPing)
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hud_ping()) {
    hud_ping_ = new ::CDOTAMsg_CoachHUDPing(*from.hud_ping_);
  } else {
    hud_ping_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CoachHUDPing)
}

void CDOTAUserMsg_CoachHUDPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hud_ping_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&hud_ping_)) + sizeof(player_id_));
}

CDOTAUserMsg_CoachHUDPing::~CDOTAUserMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CoachHUDPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hud_ping_;
}

void CDOTAUserMsg_CoachHUDPing::ArenaDtor(void* object) {
  CDOTAUserMsg_CoachHUDPing* _this = reinterpret_cast< CDOTAUserMsg_CoachHUDPing* >(object);
  (void)_this;
}
void CDOTAUserMsg_CoachHUDPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CoachHUDPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(hud_ping_ != nullptr);
    hud_ping_->Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CoachHUDPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hud_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CoachHUDPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hud_ping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CoachHUDPing)
  return target;
}

size_t CDOTAUserMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CoachHUDPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hud_ping_);
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CoachHUDPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CoachHUDPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CoachHUDPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CoachHUDPing)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(from._internal_hud_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CoachHUDPing::InternalSwap(CDOTAUserMsg_CoachHUDPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, player_id_)
      + sizeof(CDOTAUserMsg_CoachHUDPing::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, hud_ping_)>(
          reinterpret_cast<char*>(&hud_ping_),
          reinterpret_cast<char*>(&other->hud_ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CoachHUDPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_GuideSelectOption::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_GuideSelectOption>()._has_bits_);
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_recalculate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_GuideSelectOption)
}
CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(const CDOTAClientMsg_GuideSelectOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&option_, &from.option_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_recalculate_) -
    reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GuideSelectOption)
}

void CDOTAClientMsg_GuideSelectOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&option_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_recalculate_) -
    reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
}

CDOTAClientMsg_GuideSelectOption::~CDOTAClientMsg_GuideSelectOption() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GuideSelectOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_GuideSelectOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_GuideSelectOption::ArenaDtor(void* object) {
  CDOTAClientMsg_GuideSelectOption* _this = reinterpret_cast< CDOTAClientMsg_GuideSelectOption* >(object);
  (void)_this;
}
void CDOTAClientMsg_GuideSelectOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_GuideSelectOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_GuideSelectOption::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_GuideSelectOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_recalculate_) -
        reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_GuideSelectOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_option(&has_bits);
          option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_recalculate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_force_recalculate(&has_bits);
          force_recalculate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_GuideSelectOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GuideSelectOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 option = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_option(), target);
  }

  // optional bool force_recalculate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force_recalculate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GuideSelectOption)
  return target;
}

size_t CDOTAClientMsg_GuideSelectOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_GuideSelectOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 option = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_option());
    }

    // optional bool force_recalculate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GuideSelectOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_GuideSelectOption)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GuideSelectOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_GuideSelectOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_GuideSelectOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_GuideSelectOption)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GuideSelectOption::MergeFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_GuideSelectOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      option_ = from.option_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_recalculate_ = from.force_recalculate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_GuideSelectOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_GuideSelectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GuideSelectOption::CopyFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_GuideSelectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelectOption::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelectOption::InternalSwap(CDOTAClientMsg_GuideSelectOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelectOption, force_recalculate_)
      + sizeof(CDOTAClientMsg_GuideSelectOption::force_recalculate_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelectOption, option_)>(
          reinterpret_cast<char*>(&option_),
          reinterpret_cast<char*>(&other->option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_GuideSelectOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_GuideSelected::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_GuideSelected>()._has_bits_);
  static void set_has_guide_workshop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_plus_guide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_GuideSelected)
}
CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(const CDOTAClientMsg_GuideSelected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guide_workshop_id_, &from.guide_workshop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_plus_guide_) -
    reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GuideSelected)
}

void CDOTAClientMsg_GuideSelected::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guide_workshop_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_plus_guide_) -
    reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
}

CDOTAClientMsg_GuideSelected::~CDOTAClientMsg_GuideSelected() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GuideSelected)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_GuideSelected::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAClientMsg_GuideSelected::ArenaDtor(void* object) {
  CDOTAClientMsg_GuideSelected* _this = reinterpret_cast< CDOTAClientMsg_GuideSelected* >(object);
  (void)_this;
}
void CDOTAClientMsg_GuideSelected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_GuideSelected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_GuideSelected::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_GuideSelected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guide_workshop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_plus_guide_) -
        reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_GuideSelected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guide_workshop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guide_workshop_id(&has_bits);
          guide_workshop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_plus_guide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_plus_guide(&has_bits);
          is_plus_guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_GuideSelected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GuideSelected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guide_workshop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guide_workshop_id(), target);
  }

  // optional bool is_plus_guide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_plus_guide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GuideSelected)
  return target;
}

size_t CDOTAClientMsg_GuideSelected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_GuideSelected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 guide_workshop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guide_workshop_id());
    }

    // optional bool is_plus_guide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_GuideSelected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_GuideSelected)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GuideSelected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_GuideSelected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_GuideSelected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_GuideSelected)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GuideSelected::MergeFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_GuideSelected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guide_workshop_id_ = from.guide_workshop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_plus_guide_ = from.is_plus_guide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_GuideSelected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_GuideSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GuideSelected::CopyFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_GuideSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelected::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelected::InternalSwap(CDOTAClientMsg_GuideSelected* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelected, is_plus_guide_)
      + sizeof(CDOTAClientMsg_GuideSelected::is_plus_guide_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelected, guide_workshop_id_)>(
          reinterpret_cast<char*>(&guide_workshop_id_),
          reinterpret_cast<char*>(&other->guide_workshop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_GuideSelected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCLCMsg_CmdKeyValues::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_CmdKeyValues>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_CmdKeyValues)
}
CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(const CCLCMsg_CmdKeyValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_CmdKeyValues)
}

void CCLCMsg_CmdKeyValues::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCLCMsg_CmdKeyValues::~CCLCMsg_CmdKeyValues() {
  // @@protoc_insertion_point(destructor:CCLCMsg_CmdKeyValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCLCMsg_CmdKeyValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_CmdKeyValues::ArenaDtor(void* object) {
  CCLCMsg_CmdKeyValues* _this = reinterpret_cast< CCLCMsg_CmdKeyValues* >(object);
  (void)_this;
}
void CCLCMsg_CmdKeyValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_CmdKeyValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_CmdKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_CmdKeyValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_CmdKeyValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCLCMsg_CmdKeyValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_CmdKeyValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_CmdKeyValues)
  return target;
}

size_t CCLCMsg_CmdKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_CmdKeyValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCLCMsg_CmdKeyValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_CmdKeyValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCLCMsg_CmdKeyValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_CmdKeyValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_CmdKeyValues)
    MergeFrom(*source);
  }
}

void CCLCMsg_CmdKeyValues::MergeFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void CCLCMsg_CmdKeyValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_CmdKeyValues::CopyFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_CmdKeyValues::IsInitialized() const {
  return true;
}

void CCLCMsg_CmdKeyValues::InternalSwap(CCLCMsg_CmdKeyValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_CmdKeyValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCLCMsg_FileCRCCheck::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_FileCRCCheck>()._has_bits_);
  static void set_has_code_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_FileCRCCheck)
}
CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(const CCLCMsg_FileCRCCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  ::memcpy(&code_path_, &from.code_path_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&code_path_)) + sizeof(crc_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_FileCRCCheck)
}

void CCLCMsg_FileCRCCheck::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&code_path_)) + sizeof(crc_));
}

CCLCMsg_FileCRCCheck::~CCLCMsg_FileCRCCheck() {
  // @@protoc_insertion_point(destructor:CCLCMsg_FileCRCCheck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCLCMsg_FileCRCCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_FileCRCCheck::ArenaDtor(void* object) {
  CCLCMsg_FileCRCCheck* _this = reinterpret_cast< CCLCMsg_FileCRCCheck* >(object);
  (void)_this;
}
void CCLCMsg_FileCRCCheck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_FileCRCCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_FileCRCCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_FileCRCCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&code_path_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_) -
        reinterpret_cast<char*>(&code_path_)) + sizeof(crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_FileCRCCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 code_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_code_path(&has_bits);
          code_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCLCMsg_FileCRCCheck.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 code_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_code_filename(&has_bits);
          code_filename_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCLCMsg_FileCRCCheck.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 crc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCLCMsg_FileCRCCheck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_FileCRCCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code_path = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code_path(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // optional int32 code_filename = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code_filename(), target);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename(), target);
  }

  // optional fixed32 crc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_FileCRCCheck)
  return target;
}

size_t CCLCMsg_FileCRCCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_FileCRCCheck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string filename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional int32 code_path = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_code_path());
    }

    // optional int32 code_filename = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_code_filename());
    }

    // optional fixed32 crc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCLCMsg_FileCRCCheck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_FileCRCCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_FileCRCCheck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCLCMsg_FileCRCCheck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_FileCRCCheck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_FileCRCCheck)
    MergeFrom(*source);
  }
}

void CCLCMsg_FileCRCCheck::MergeFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_FileCRCCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      code_path_ = from.code_path_;
    }
    if (cached_has_bits & 0x00000008u) {
      code_filename_ = from.code_filename_;
    }
    if (cached_has_bits & 0x00000010u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_FileCRCCheck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_FileCRCCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_FileCRCCheck::CopyFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_FileCRCCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_FileCRCCheck::IsInitialized() const {
  return true;
}

void CCLCMsg_FileCRCCheck::InternalSwap(CCLCMsg_FileCRCCheck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCLCMsg_FileCRCCheck, crc_)
      + sizeof(CCLCMsg_FileCRCCheck::crc_)
      - PROTOBUF_FIELD_OFFSET(CCLCMsg_FileCRCCheck, code_path_)>(
          reinterpret_cast<char*>(&code_path_),
          reinterpret_cast<char*>(&other->code_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_FileCRCCheck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCLCMsg_ClientMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_ClientMessage>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCLCMsg_ClientMessage::CCLCMsg_ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_ClientMessage)
}
CCLCMsg_ClientMessage::CCLCMsg_ClientMessage(const CCLCMsg_ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_ClientMessage)
}

void CCLCMsg_ClientMessage::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_type_ = 0;
}

CCLCMsg_ClientMessage::~CCLCMsg_ClientMessage() {
  // @@protoc_insertion_point(destructor:CCLCMsg_ClientMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCLCMsg_ClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_ClientMessage::ArenaDtor(void* object) {
  CCLCMsg_ClientMessage* _this = reinterpret_cast< CCLCMsg_ClientMessage* >(object);
  (void)_this;
}
void CCLCMsg_ClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  msg_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCLCMsg_ClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_ClientMessage)
  return target;
}

size_t CCLCMsg_ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_ClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_msg_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCLCMsg_ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCLCMsg_ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_ClientMessage)
    MergeFrom(*source);
  }
}

void CCLCMsg_ClientMessage::MergeFrom(const CCLCMsg_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_ClientMessage::CopyFrom(const CCLCMsg_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_ClientMessage::IsInitialized() const {
  return true;
}

void CCLCMsg_ClientMessage::InternalSwap(CCLCMsg_ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_MatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_MatchMetadata>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_MatchMetadata)
}
CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(const CDOTAClientMsg_MatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MatchMetadata)
}

void CDOTAClientMsg_MatchMetadata::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
match_id_ = PROTOBUF_ULONGLONG(0);
}

CDOTAClientMsg_MatchMetadata::~CDOTAClientMsg_MatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MatchMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_MatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_MatchMetadata::ArenaDtor(void* object) {
  CDOTAClientMsg_MatchMetadata* _this = reinterpret_cast< CDOTAClientMsg_MatchMetadata* >(object);
  (void)_this;
}
void CDOTAClientMsg_MatchMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_MatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_MatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_MatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmpty();
  }
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_MatchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_MatchMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MatchMetadata)
  return target;
}

size_t CDOTAClientMsg_MatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_MatchMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MatchMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_MatchMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_MatchMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_MatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MatchMetadata::InternalSwap(CDOTAClientMsg_MatchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_MatchMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemAttribute>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconItemAttribute::CSOEconItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemAttribute)
}
CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_bytes()) {
    value_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_bytes(), 
      GetArena());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemAttribute)
}

void CSOEconItemAttribute::SharedCtor() {
value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  // @@protoc_insertion_point(destructor:CSOEconItemAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOEconItemAttribute::ArenaDtor(void* object) {
  CSOEconItemAttribute* _this = reinterpret_cast< CSOEconItemAttribute* >(object);
  (void)_this;
}
void CSOEconItemAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes value_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemAttribute)
  return target;
}

size_t CSOEconItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes value_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value_bytes());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemAttribute)
    MergeFrom(*source);
  }
}

void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value_bytes(from._internal_value_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  return true;
}

void CSOEconItemAttribute::InternalSwap(CSOEconItemAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_bytes_.Swap(&other->value_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, value_)
      + sizeof(CSOEconItemAttribute::value_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemEquipped::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemEquipped>()._has_bits_);
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOEconItemEquipped::CSOEconItemEquipped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemEquipped)
}
CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_class_, &from.new_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemEquipped)
}

void CSOEconItemEquipped::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_class_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  // @@protoc_insertion_point(destructor:CSOEconItemEquipped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemEquipped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconItemEquipped::ArenaDtor(void* object) {
  CSOEconItemEquipped* _this = reinterpret_cast< CSOEconItemEquipped* >(object);
  (void)_this;
}
void CSOEconItemEquipped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemEquipped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemEquipped::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemEquipped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_class_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_slot_) -
        reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemEquipped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 new_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_class(&has_bits);
          new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_slot(&has_bits);
          new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemEquipped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemEquipped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemEquipped)
  return target;
}

size_t CSOEconItemEquipped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemEquipped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_class = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_class());
    }

    // optional uint32 new_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemEquipped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemEquipped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemEquipped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemEquipped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemEquipped)
    MergeFrom(*source);
  }
}

void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_slot_ = from.new_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemEquipped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  return true;
}

void CSOEconItemEquipped::InternalSwap(CSOEconItemEquipped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_slot_)
      + sizeof(CSOEconItemEquipped::new_slot_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_class_)>(
          reinterpret_cast<char*>(&new_class_),
          reinterpret_cast<char*>(&other->new_class_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemEquipped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CSOEconItem& interior_item(const CSOEconItem* msg);
  static void set_has_interior_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CSOEconItem&
CSOEconItem::_Internal::interior_item(const CSOEconItem* msg) {
  return *msg->interior_item_;
}
CSOEconItem::CSOEconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribute_(arena),
  equipped_state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItem)
}
CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      equipped_state_(from.equipped_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interior_item()) {
    interior_item_ = new ::CSOEconItem(*from.interior_item_);
  } else {
    interior_item_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItem)
}

void CSOEconItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interior_item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&original_id_) -
    reinterpret_cast<char*>(&interior_item_)) + sizeof(original_id_));
quality_ = 4u;
quantity_ = 1u;
level_ = 1u;
}

CSOEconItem::~CSOEconItem() {
  // @@protoc_insertion_point(destructor:CSOEconItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interior_item_;
}

void CSOEconItem::ArenaDtor(void* object) {
  CSOEconItem* _this = reinterpret_cast< CSOEconItem* >(object);
  (void)_this;
}
void CSOEconItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  equipped_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(interior_item_ != nullptr);
    interior_item_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&id_)) + sizeof(style_));
  }
  if (cached_has_bits & 0x00000f00u) {
    original_id_ = PROTOBUF_ULONGLONG(0);
    quality_ = 4u;
    quantity_ = 1u;
    level_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 inventory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inventory(&has_bits);
          inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality = 7 [default = 4];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CSOEconItem interior_item = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_id = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_original_id(&has_bits);
          original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOEconItemEquipped equipped_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_equipped_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_def_index(), target);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quantity(), target);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_quality(), target);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_origin(), target);
  }

  // repeated .CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_attribute(i), target, stream);
  }

  // optional .CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::interior_item(this), target, stream);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_style(), target);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_original_id(), target);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_equipped_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItem)
  return target;
}

size_t CSOEconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  total_size += 2UL * this->_internal_equipped_state_size();
  for (const auto& msg : this->equipped_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CSOEconItem interior_item = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interior_item_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 inventory = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventory());
    }

    // optional uint32 def_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 flags = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 origin = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

    // optional uint32 style = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 original_id = 16 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_id());
    }

    // optional uint32 quality = 7 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional uint32 quantity = 5 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

    // optional uint32 level = 6 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItem)
    MergeFrom(*source);
  }
}

void CSOEconItem::MergeFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_interior_item()->::CSOEconItem::MergeFrom(from._internal_interior_item());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000010u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000080u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      original_id_ = from.original_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  return true;
}

void CSOEconItem::InternalSwap(CSOEconItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  equipped_state_.InternalSwap(&other->equipped_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItem, original_id_)
      + sizeof(CSOEconItem::original_id_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItem, interior_item_)>(
          reinterpret_cast<char*>(&interior_item_),
          reinterpret_cast<char*>(&other->interior_item_));
  swap(quality_, other->quality_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CLobbyTimedRewardDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyTimedRewardDetails>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_supply_crate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_timed_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLobbyTimedRewardDetails)
}
CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTimedRewardDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLobbyTimedRewardDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CLobbyTimedRewardDetails::ArenaDtor(void* object) {
  CLobbyTimedRewardDetails* _this = reinterpret_cast< CLobbyTimedRewardDetails* >(object);
  (void)_this;
}
void CLobbyTimedRewardDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLobbyTimedRewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyTimedRewardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyTimedRewardDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_supply_crate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_supply_crate(&has_bits);
          is_supply_crate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_timed_drop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_timed_drop(&has_bits);
          is_timed_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLobbyTimedRewardDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTimedRewardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_account_id(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTimedRewardDetails)
  return target;
}

size_t CLobbyTimedRewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyTimedRewardDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyTimedRewardDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyTimedRewardDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLobbyTimedRewardDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLobbyTimedRewardDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLobbyTimedRewardDetails)
    MergeFrom(*source);
  }
}

void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_supply_crate_ = from.is_supply_crate_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_timed_drop_ = from.is_timed_drop_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyTimedRewardDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {
  return true;
}

void CLobbyTimedRewardDetails::InternalSwap(CLobbyTimedRewardDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, origin_)
      + sizeof(CLobbyTimedRewardDetails::origin_)
      - PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, item_def_index_)>(
          reinterpret_cast<char*>(&item_def_index_),
          reinterpret_cast<char*>(&other->item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchTips_SingleTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchTips_SingleTip>()._has_bits_);
  static void set_has_source_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchTips.SingleTip)
}
CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(const CMsgMatchTips_SingleTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_account_id_, &from.source_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchTips.SingleTip)
}

void CMsgMatchTips_SingleTip::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
}

CMsgMatchTips_SingleTip::~CMsgMatchTips_SingleTip() {
  // @@protoc_insertion_point(destructor:CMsgMatchTips.SingleTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchTips_SingleTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchTips_SingleTip::ArenaDtor(void* object) {
  CMsgMatchTips_SingleTip* _this = reinterpret_cast< CMsgMatchTips_SingleTip* >(object);
  (void)_this;
}
void CMsgMatchTips_SingleTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchTips_SingleTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchTips_SingleTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchTips.SingleTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchTips_SingleTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_account_id(&has_bits);
          source_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_account_id(&has_bits);
          target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tip_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tip_amount(&has_bits);
          tip_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchTips_SingleTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchTips.SingleTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_account_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_account_id(), target);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tip_amount(), target);
  }

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchTips.SingleTip)
  return target;
}

size_t CMsgMatchTips_SingleTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchTips.SingleTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 source_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_account_id());
    }

    // optional uint32 target_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_account_id());
    }

    // optional uint32 tip_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tip_amount());
    }

    // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchTips_SingleTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchTips.SingleTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchTips_SingleTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchTips_SingleTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchTips.SingleTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchTips.SingleTip)
    MergeFrom(*source);
  }
}

void CMsgMatchTips_SingleTip::MergeFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchTips.SingleTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_account_id_ = from.source_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_account_id_ = from.target_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tip_amount_ = from.tip_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchTips_SingleTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchTips.SingleTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchTips_SingleTip::CopyFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchTips.SingleTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips_SingleTip::IsInitialized() const {
  return true;
}

void CMsgMatchTips_SingleTip::InternalSwap(CMsgMatchTips_SingleTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchTips_SingleTip, event_id_)
      + sizeof(CMsgMatchTips_SingleTip::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchTips_SingleTip, source_account_id_)>(
          reinterpret_cast<char*>(&source_account_id_),
          reinterpret_cast<char*>(&other->source_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchTips_SingleTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchTips::_Internal {
 public:
};

CMsgMatchTips::CMsgMatchTips(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchTips)
}
CMsgMatchTips::CMsgMatchTips(const CMsgMatchTips& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tips_(from.tips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchTips)
}

void CMsgMatchTips::SharedCtor() {
}

CMsgMatchTips::~CMsgMatchTips() {
  // @@protoc_insertion_point(destructor:CMsgMatchTips)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchTips::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchTips::ArenaDtor(void* object) {
  CMsgMatchTips* _this = reinterpret_cast< CMsgMatchTips* >(object);
  (void)_this;
}
void CMsgMatchTips::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchTips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchTips::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchTips)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchTips::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgMatchTips.SingleTip tips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchTips::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchTips)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchTips.SingleTip tips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchTips)
  return target;
}

size_t CMsgMatchTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchTips)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchTips.SingleTip tips = 2;
  total_size += 1UL * this->_internal_tips_size();
  for (const auto& msg : this->tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchTips::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchTips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchTips* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchTips>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchTips)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchTips)
    MergeFrom(*source);
  }
}

void CMsgMatchTips::MergeFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchTips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tips_.MergeFrom(from.tips_);
}

void CMsgMatchTips::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchTips::CopyFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips::IsInitialized() const {
  return true;
}

void CMsgMatchTips::InternalSwap(CMsgMatchTips* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tips_.InternalSwap(&other->tips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchTips::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchMatchmakingStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMatchmakingStats>()._has_bits_);
  static void set_has_average_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maximum_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_behavior_score_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMatchmakingStats)
}
CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(const CMsgMatchMatchmakingStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_queue_time_, &from.average_queue_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_score_variance_) -
    reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMatchmakingStats)
}

void CMsgMatchMatchmakingStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_queue_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&behavior_score_variance_) -
    reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
}

CMsgMatchMatchmakingStats::~CMsgMatchMatchmakingStats() {
  // @@protoc_insertion_point(destructor:CMsgMatchMatchmakingStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchMatchmakingStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchMatchmakingStats::ArenaDtor(void* object) {
  CMsgMatchMatchmakingStats* _this = reinterpret_cast< CMsgMatchMatchmakingStats* >(object);
  (void)_this;
}
void CMsgMatchMatchmakingStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchMatchmakingStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchMatchmakingStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMatchmakingStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&average_queue_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&behavior_score_variance_) -
        reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMatchmakingStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 average_queue_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_average_queue_time(&has_bits);
          average_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maximum_queue_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maximum_queue_time(&has_bits);
          maximum_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchBehaviorScoreVariance_IsValid(val))) {
            _internal_set_behavior_score_variance(static_cast<::EMatchBehaviorScoreVariance>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchMatchmakingStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMatchmakingStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 average_queue_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_queue_time(), target);
  }

  // optional uint32 maximum_queue_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_queue_time(), target);
  }

  // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_behavior_score_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMatchmakingStats)
  return target;
}

size_t CMsgMatchMatchmakingStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMatchmakingStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 average_queue_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_average_queue_time());
    }

    // optional uint32 maximum_queue_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maximum_queue_time());
    }

    // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior_score_variance());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchMatchmakingStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchMatchmakingStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchMatchmakingStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchMatchmakingStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchMatchmakingStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchMatchmakingStats)
    MergeFrom(*source);
  }
}

void CMsgMatchMatchmakingStats::MergeFrom(const CMsgMatchMatchmakingStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMatchmakingStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      average_queue_time_ = from.average_queue_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_queue_time_ = from.maximum_queue_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      behavior_score_variance_ = from.behavior_score_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchMatchmakingStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchMatchmakingStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchMatchmakingStats::CopyFrom(const CMsgMatchMatchmakingStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMatchmakingStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMatchmakingStats::IsInitialized() const {
  return true;
}

void CMsgMatchMatchmakingStats::InternalSwap(CMsgMatchMatchmakingStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, behavior_score_variance_)
      + sizeof(CMsgMatchMatchmakingStats::behavior_score_variance_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, average_queue_time_)>(
          reinterpret_cast<char*>(&average_queue_time_),
          reinterpret_cast<char*>(&other->average_queue_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMatchmakingStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_PlayerKill::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_PlayerKill>()._has_bits_);
  static void set_has_victim_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}
CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&victim_slot_, &from.victim_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&victim_slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
}

CDOTAMatchMetadata_Team_PlayerKill::~CDOTAMatchMetadata_Team_PlayerKill() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.PlayerKill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_PlayerKill::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_PlayerKill* _this = reinterpret_cast< CDOTAMatchMetadata_Team_PlayerKill* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_PlayerKill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_PlayerKill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_PlayerKill::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.PlayerKill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&victim_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_PlayerKill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 victim_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_victim_slot(&has_bits);
          victim_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_PlayerKill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.PlayerKill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_victim_slot(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.PlayerKill)
  return target;
}

size_t CDOTAMatchMetadata_Team_PlayerKill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.PlayerKill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 victim_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim_slot());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_PlayerKill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_PlayerKill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.PlayerKill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.PlayerKill)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      victim_slot_ = from.victim_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PlayerKill::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_PlayerKill::InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, count_)
      + sizeof(CDOTAMatchMetadata_Team_PlayerKill::count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, victim_slot_)>(
          reinterpret_cast<char*>(&victim_slot_),
          reinterpret_cast<char*>(&other->victim_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_PlayerKill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_ItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ItemPurchase>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_purchase_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}
CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
}

CDOTAMatchMetadata_Team_ItemPurchase::~CDOTAMatchMetadata_Team_ItemPurchase() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ItemPurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_ItemPurchase::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_ItemPurchase* _this = reinterpret_cast< CDOTAMatchMetadata_Team_ItemPurchase* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_ItemPurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_ItemPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ItemPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_time_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ItemPurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 purchase_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_purchase_time(&has_bits);
          purchase_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_ItemPurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ItemPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ItemPurchase)
  return target;
}

size_t CDOTAMatchMetadata_Team_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ItemPurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_id());
    }

    // optional int32 purchase_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_purchase_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_ItemPurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_ItemPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.ItemPurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.ItemPurchase)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_time_ = from.purchase_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ItemPurchase::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ItemPurchase::InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_)
      + sizeof(CDOTAMatchMetadata_Team_ItemPurchase::purchase_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ItemPurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_InventorySnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_InventorySnapshot>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}
CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_id_(from.item_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
}

CDOTAMatchMetadata_Team_InventorySnapshot::~CDOTAMatchMetadata_Team_InventorySnapshot() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.InventorySnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_InventorySnapshot* _this = reinterpret_cast< CDOTAMatchMetadata_Team_InventorySnapshot* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_InventorySnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  for (int i = 0, n = this->_internal_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_time(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assists(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.InventorySnapshot)
  return target;
}

size_t CDOTAMatchMetadata_Team_InventorySnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 game_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_time());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_InventorySnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_InventorySnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.InventorySnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.InventorySnapshot)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_id_.MergeFrom(from.item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_id_.InternalSwap(&other->item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, level_)
      + sizeof(CDOTAMatchMetadata_Team_InventorySnapshot::level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, game_time_)>(
          reinterpret_cast<char*>(&game_time_),
          reinterpret_cast<char*>(&other->game_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_InventorySnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_AutoStyleCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_AutoStyleCriteria>()._has_bits_);
  static void set_has_name_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}
CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_token_, &from.name_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::~CDOTAMatchMetadata_Team_AutoStyleCriteria() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_AutoStyleCriteria* _this = reinterpret_cast< CDOTAMatchMetadata_Team_AutoStyleCriteria* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 name_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_name_token(&has_bits);
          name_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_name_token(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return target;
}

size_t CDOTAMatchMetadata_Team_AutoStyleCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 name_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_name_token());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_AutoStyleCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_AutoStyleCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.AutoStyleCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.AutoStyleCriteria)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_token_ = from.name_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, value_)
      + sizeof(CDOTAMatchMetadata_Team_AutoStyleCriteria::value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_)>(
          reinterpret_cast<char*>(&name_token_),
          reinterpret_cast<char*>(&other->name_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_AutoStyleCriteria::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_StrangeGemProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_StrangeGemProgress>()._has_bits_);
  static void set_has_kill_eater_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gem_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_required_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ending_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_owner_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_owner_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}
CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kill_eater_type_, &from.kill_eater_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_item_id_) -
    reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kill_eater_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_item_id_) -
    reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
}

CDOTAMatchMetadata_Team_StrangeGemProgress::~CDOTAMatchMetadata_Team_StrangeGemProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_StrangeGemProgress* _this = reinterpret_cast< CDOTAMatchMetadata_Team_StrangeGemProgress* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_StrangeGemProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_StrangeGemProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&kill_eater_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_item_id_) -
        reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 kill_eater_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kill_eater_type(&has_bits);
          kill_eater_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gem_item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gem_item_def_index(&has_bits);
          gem_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_required_hero_id(&has_bits);
          required_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starting_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_starting_value(&has_bits);
          starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ending_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ending_value(&has_bits);
          ending_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_item_def_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_owner_item_def_index(&has_bits);
          owner_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 owner_item_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_owner_item_id(&has_bits);
          owner_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 kill_eater_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_kill_eater_type(), target);
  }

  // optional uint32 gem_item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gem_item_def_index(), target);
  }

  // optional uint32 required_hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_hero_id(), target);
  }

  // optional uint32 starting_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_starting_value(), target);
  }

  // optional uint32 ending_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ending_value(), target);
  }

  // optional uint32 owner_item_def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_owner_item_def_index(), target);
  }

  // optional uint64 owner_item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_owner_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.StrangeGemProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_StrangeGemProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 kill_eater_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kill_eater_type());
    }

    // optional uint32 gem_item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gem_item_def_index());
    }

    // optional uint32 required_hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_hero_id());
    }

    // optional uint32 starting_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starting_value());
    }

    // optional uint32 ending_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ending_value());
    }

    // optional uint32 owner_item_def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_item_def_index());
    }

    // optional uint64 owner_item_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_owner_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_StrangeGemProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_StrangeGemProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.StrangeGemProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.StrangeGemProgress)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      kill_eater_type_ = from.kill_eater_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      gem_item_def_index_ = from.gem_item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      required_hero_id_ = from.required_hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      ending_value_ = from.ending_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      owner_item_def_index_ = from.owner_item_def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      owner_item_id_ = from.owner_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_StrangeGemProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_id_)
      + sizeof(CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, kill_eater_type_)>(
          reinterpret_cast<char*>(&kill_eater_type_),
          reinterpret_cast<char*>(&other->kill_eater_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_StrangeGemProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_VictoryPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_VictoryPrediction>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}
CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_victory_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_victory_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
}

CDOTAMatchMetadata_Team_VictoryPrediction::~CDOTAMatchMetadata_Team_VictoryPrediction() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.VictoryPrediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_VictoryPrediction* _this = reinterpret_cast< CDOTAMatchMetadata_Team_VictoryPrediction* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_VictoryPrediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_VictoryPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_victory_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starting_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_starting_value(&has_bits);
          starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_victory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_victory(&has_bits);
          is_victory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional uint32 starting_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_starting_value(), target);
  }

  // optional bool is_victory = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_victory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.VictoryPrediction)
  return target;
}

size_t CDOTAMatchMetadata_Team_VictoryPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional uint32 starting_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starting_value());
    }

    // optional bool is_victory = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_VictoryPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_VictoryPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.VictoryPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.VictoryPrediction)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_VictoryPrediction::MergeFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_victory_ = from.is_victory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_VictoryPrediction::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, is_victory_)
      + sizeof(CDOTAMatchMetadata_Team_VictoryPrediction::is_victory_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_VictoryPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_SubChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_SubChallenge>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}
CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}

void CDOTAMatchMetadata_Team_SubChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
}

CDOTAMatchMetadata_Team_SubChallenge::~CDOTAMatchMetadata_Team_SubChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.SubChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_SubChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_SubChallenge::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_SubChallenge* _this = reinterpret_cast< CDOTAMatchMetadata_Team_SubChallenge* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_SubChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_SubChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_SubChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.SubChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_SubChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_value(&has_bits);
          start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_value(&has_bits);
          end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_SubChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.SubChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint32 start_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_value(), target);
  }

  // optional uint32 end_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_value(), target);
  }

  // optional bool completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.SubChallenge)
  return target;
}

size_t CDOTAMatchMetadata_Team_SubChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.SubChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 start_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_value());
    }

    // optional uint32 end_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_value());
    }

    // optional bool completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_SubChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_SubChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_SubChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.SubChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.SubChallenge)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_SubChallenge::MergeFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_value_ = from.start_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_value_ = from.end_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_SubChallenge::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_SubChallenge::InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, completed_)
      + sizeof(CDOTAMatchMetadata_Team_SubChallenge::completed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, slot_id_)>(
          reinterpret_cast<char*>(&slot_id_),
          reinterpret_cast<char*>(&other->slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_SubChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_CavernChallengeResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_CavernChallengeResult>()._has_bits_);
  static void set_has_completed_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claimed_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}
CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(const CDOTAMatchMetadata_Team_CavernChallengeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&completed_path_id_, &from.completed_path_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&claimed_room_id_) -
    reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&completed_path_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&claimed_room_id_) -
    reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
}

CDOTAMatchMetadata_Team_CavernChallengeResult::~CDOTAMatchMetadata_Team_CavernChallengeResult() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_CavernChallengeResult* _this = reinterpret_cast< CDOTAMatchMetadata_Team_CavernChallengeResult* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_CavernChallengeResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_CavernChallengeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&completed_path_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&claimed_room_id_) -
        reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 completed_path_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_completed_path_id(&has_bits);
          completed_path_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_claimed_room_id(&has_bits);
          claimed_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 completed_path_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_completed_path_id(), target);
  }

  // optional uint32 claimed_room_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_claimed_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.CavernChallengeResult)
  return target;
}

size_t CDOTAMatchMetadata_Team_CavernChallengeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 completed_path_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_completed_path_id());
    }

    // optional uint32 claimed_room_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_room_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_CavernChallengeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_CavernChallengeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.CavernChallengeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.CavernChallengeResult)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::MergeFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      completed_path_id_ = from.completed_path_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      claimed_room_id_ = from.claimed_room_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::CopyFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_CavernChallengeResult::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::InternalSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CavernChallengeResult, claimed_room_id_)
      + sizeof(CDOTAMatchMetadata_Team_CavernChallengeResult::claimed_room_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CavernChallengeResult, completed_path_id_)>(
          reinterpret_cast<char*>(&completed_path_id_),
          reinterpret_cast<char*>(&other->completed_path_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_CavernChallengeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_ActionGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ActionGrant>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}
CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(const CDOTAMatchMetadata_Team_ActionGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(audit_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}

void CDOTAMatchMetadata_Team_ActionGrant::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(audit_));
}

CDOTAMatchMetadata_Team_ActionGrant::~CDOTAMatchMetadata_Team_ActionGrant() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ActionGrant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_ActionGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_ActionGrant::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_ActionGrant* _this = reinterpret_cast< CDOTAMatchMetadata_Team_ActionGrant* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_ActionGrant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_ActionGrant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ActionGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ActionGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(audit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ActionGrant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_audit(&has_bits);
          audit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_ActionGrant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ActionGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // optional uint32 audit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_audit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ActionGrant)
  return target;
}

size_t CDOTAMatchMetadata_Team_ActionGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ActionGrant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

    // optional uint32 audit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_ActionGrant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_ActionGrant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_ActionGrant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.ActionGrant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.ActionGrant)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_ActionGrant::MergeFrom(const CDOTAMatchMetadata_Team_ActionGrant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      audit_ = from.audit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_ActionGrant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_ActionGrant::CopyFrom(const CDOTAMatchMetadata_Team_ActionGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ActionGrant::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ActionGrant::InternalSwap(CDOTAMatchMetadata_Team_ActionGrant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, audit_)
      + sizeof(CDOTAMatchMetadata_Team_ActionGrant::audit_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ActionGrant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_EventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_EventData>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_quest_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_challenge_rank_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_rank_previously_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_event_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wager_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cavern_challenge_active(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cavern_challenge_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_amount_wagered(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_team_wager_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_periodic_point_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cavern_challenge_plus_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_challenges_with_progress_(arena),
  cavern_challenge_map_results_(arena),
  actions_granted_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.EventData)
}
CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_challenges_with_progress_(from.sub_challenges_with_progress_),
      cavern_challenge_map_results_(from.cavern_challenge_map_results_),
      actions_granted_(from.actions_granted_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cavern_challenge_plus_shard_winnings_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(cavern_challenge_plus_shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.EventData)
}

void CDOTAMatchMetadata_Team_EventData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cavern_challenge_plus_shard_winnings_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(cavern_challenge_plus_shard_winnings_));
}

CDOTAMatchMetadata_Team_EventData::~CDOTAMatchMetadata_Team_EventData() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.EventData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_EventData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_EventData::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_EventData* _this = reinterpret_cast< CDOTAMatchMetadata_Team_EventData* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_EventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_EventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.EventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_challenges_with_progress_.Clear();
  cavern_challenge_map_results_.Clear();
  actions_granted_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_completed_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_completed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&event_owned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cavern_challenge_plus_shard_winnings_) -
        reinterpret_cast<char*>(&event_owned_)) + sizeof(cavern_challenge_plus_shard_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_EventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_points(&has_bits);
          event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_quest_id(&has_bits);
          challenge_quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_challenge_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_quest_challenge_id(&has_bits);
          challenge_quest_challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool challenge_completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_challenge_completed(&has_bits);
          challenge_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_challenge_rank_completed(&has_bits);
          challenge_rank_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_previously_completed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_challenge_rank_previously_completed(&has_bits);
          challenge_rank_previously_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool event_owned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_event_owned(&has_bits);
          event_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_challenges_with_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 wager_winnings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_wager_winnings(&has_bits);
          wager_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cavern_challenge_active = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cavern_challenge_active(&has_bits);
          cavern_challenge_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_winnings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_cavern_challenge_winnings(&has_bits);
          cavern_challenge_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 amount_wagered = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_amount_wagered(&has_bits);
          amount_wagered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_wager_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_team_wager_amount(&has_bits);
          team_wager_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 periodic_point_adjustments = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_periodic_point_adjustments(&has_bits);
          periodic_point_adjustments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cavern_challenge_map_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_plus_shard_winnings = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_cavern_challenge_plus_shard_winnings(&has_bits);
          cavern_challenge_plus_shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_actions_granted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_EventData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.EventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_points(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_quest_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_quest_id(), target);
  }

  // optional uint32 challenge_quest_challenge_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_quest_challenge_id(), target);
  }

  // optional bool challenge_completed = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_challenge_completed(), target);
  }

  // optional uint32 challenge_rank_completed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_rank_completed(), target);
  }

  // optional uint32 challenge_rank_previously_completed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_challenge_rank_previously_completed(), target);
  }

  // optional bool event_owned = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_event_owned(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_challenges_with_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_sub_challenges_with_progress(i), target, stream);
  }

  // optional uint32 wager_winnings = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_wager_winnings(), target);
  }

  // optional bool cavern_challenge_active = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_cavern_challenge_active(), target);
  }

  // optional uint32 cavern_challenge_winnings = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_cavern_challenge_winnings(), target);
  }

  // optional uint32 amount_wagered = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_amount_wagered(), target);
  }

  // optional uint32 team_wager_amount = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_team_wager_amount(), target);
  }

  // optional uint32 periodic_point_adjustments = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_periodic_point_adjustments(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cavern_challenge_map_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_cavern_challenge_map_results(i), target, stream);
  }

  // optional uint32 cavern_challenge_plus_shard_winnings = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_cavern_challenge_plus_shard_winnings(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_granted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_actions_granted(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.EventData)
  return target;
}

size_t CDOTAMatchMetadata_Team_EventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.EventData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  total_size += 1UL * this->_internal_sub_challenges_with_progress_size();
  for (const auto& msg : this->sub_challenges_with_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  total_size += 2UL * this->_internal_cavern_challenge_map_results_size();
  for (const auto& msg : this->cavern_challenge_map_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  total_size += 2UL * this->_internal_actions_granted_size();
  for (const auto& msg : this->actions_granted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 event_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_points());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_quest_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_quest_id());
    }

    // optional uint32 challenge_quest_challenge_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_quest_challenge_id());
    }

    // optional uint32 challenge_rank_completed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_rank_completed());
    }

    // optional uint32 challenge_rank_previously_completed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_rank_previously_completed());
    }

    // optional bool challenge_completed = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool event_owned = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool cavern_challenge_active = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 wager_winnings = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager_winnings());
    }

    // optional uint32 cavern_challenge_winnings = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cavern_challenge_winnings());
    }

    // optional uint32 amount_wagered = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_amount_wagered());
    }

    // optional uint32 team_wager_amount = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_wager_amount());
    }

    // optional uint32 periodic_point_adjustments = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_periodic_point_adjustments());
    }

    // optional uint32 cavern_challenge_plus_shard_winnings = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cavern_challenge_plus_shard_winnings());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_EventData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_EventData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_EventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.EventData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.EventData)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_EventData::MergeFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_challenges_with_progress_.MergeFrom(from.sub_challenges_with_progress_);
  cavern_challenge_map_results_.MergeFrom(from.cavern_challenge_map_results_);
  actions_granted_.MergeFrom(from.actions_granted_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_quest_id_ = from.challenge_quest_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_quest_challenge_id_ = from.challenge_quest_challenge_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      challenge_rank_completed_ = from.challenge_rank_completed_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_rank_previously_completed_ = from.challenge_rank_previously_completed_;
    }
    if (cached_has_bits & 0x00000080u) {
      challenge_completed_ = from.challenge_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      event_owned_ = from.event_owned_;
    }
    if (cached_has_bits & 0x00000200u) {
      cavern_challenge_active_ = from.cavern_challenge_active_;
    }
    if (cached_has_bits & 0x00000400u) {
      wager_winnings_ = from.wager_winnings_;
    }
    if (cached_has_bits & 0x00000800u) {
      cavern_challenge_winnings_ = from.cavern_challenge_winnings_;
    }
    if (cached_has_bits & 0x00001000u) {
      amount_wagered_ = from.amount_wagered_;
    }
    if (cached_has_bits & 0x00002000u) {
      team_wager_amount_ = from.team_wager_amount_;
    }
    if (cached_has_bits & 0x00004000u) {
      periodic_point_adjustments_ = from.periodic_point_adjustments_;
    }
    if (cached_has_bits & 0x00008000u) {
      cavern_challenge_plus_shard_winnings_ = from.cavern_challenge_plus_shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_EventData::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_EventData::InternalSwap(CDOTAMatchMetadata_Team_EventData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_challenges_with_progress_.InternalSwap(&other->sub_challenges_with_progress_);
  cavern_challenge_map_results_.InternalSwap(&other->cavern_challenge_map_results_);
  actions_granted_.InternalSwap(&other->actions_granted_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, cavern_challenge_plus_shard_winnings_)
      + sizeof(CDOTAMatchMetadata_Team_EventData::cavern_challenge_plus_shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_EventData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_deaths_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_best_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_best_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_farm_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_support_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_push_score(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_avg_stats_calibrated(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_hero_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_aegis_snatched(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_rapiers_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_couriers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_net_worth_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_support_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_observer_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sentry_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_wards_dewarded(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_rank_mmr_boost_type(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ability_upgrades_(arena),
  equipped_econ_items_(arena),
  kills_(arena),
  items_(arena),
  level_up_times_(arena),
  graph_net_worth_(arena),
  inventory_snapshot_(arena),
  auto_style_criteria_(arena),
  event_data_(arena),
  strange_gem_progress_(arena),
  victory_prediction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.Player)
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ability_upgrades_(from.ability_upgrades_),
      equipped_econ_items_(from.equipped_econ_items_),
      kills_(from.kills_),
      items_(from.items_),
      level_up_times_(from.level_up_times_),
      graph_net_worth_(from.graph_net_worth_),
      inventory_snapshot_(from.inventory_snapshot_),
      auto_style_criteria_(from.auto_style_criteria_),
      event_data_(from.event_data_),
      strange_gem_progress_(from.strange_gem_progress_),
      victory_prediction_(from.victory_prediction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_mmr_boost_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_mmr_boost_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.Player)
}

void CDOTAMatchMetadata_Team_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_mmr_boost_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_mmr_boost_type_));
}

CDOTAMatchMetadata_Team_Player::~CDOTAMatchMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_Player::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_Player* _this = reinterpret_cast< CDOTAMatchMetadata_Team_Player* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_upgrades_.Clear();
  equipped_econ_items_.Clear();
  kills_.Clear();
  items_.Clear();
  level_up_times_.Clear();
  graph_net_worth_.Clear();
  inventory_snapshot_.Clear();
  auto_style_criteria_.Clear();
  event_data_.Clear();
  strange_gem_progress_.Clear();
  victory_prediction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_kills_x16_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(best_kills_x16_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&best_assists_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&support_score_) -
        reinterpret_cast<char*>(&best_assists_x16_)) + sizeof(support_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&push_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aegis_snatched_) -
        reinterpret_cast<char*>(&push_score_)) + sizeof(aegis_snatched_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&rapiers_purchased_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stun_duration_) -
        reinterpret_cast<char*>(&rapiers_purchased_)) + sizeof(stun_duration_));
  }
  rank_mmr_boost_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&_has_bits_);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ability_upgrades = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ability_upgrades(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_slot(&_has_bits_);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOEconItem equipped_econ_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipped_econ_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_kills_x16 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_avg_kills_x16(&_has_bits_);
          avg_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_deaths_x16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_avg_deaths_x16(&_has_bits_);
          avg_deaths_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_assists_x16 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_avg_assists_x16(&_has_bits_);
          avg_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_gpm_x16 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_avg_gpm_x16(&_has_bits_);
          avg_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_xpm_x16 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_avg_xpm_x16(&_has_bits_);
          avg_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_kills_x16 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_best_kills_x16(&_has_bits_);
          best_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_assists_x16 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_best_assists_x16(&_has_bits_);
          best_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_gpm_x16 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_best_gpm_x16(&_has_bits_);
          best_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_xpm_x16 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_best_xpm_x16(&_has_bits_);
          best_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 win_streak = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_win_streak(&_has_bits_);
          win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_win_streak = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_best_win_streak(&_has_bits_);
          best_win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fight_score = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_fight_score(&_has_bits_);
          fight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float farm_score = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_farm_score(&_has_bits_);
          farm_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float support_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_support_score(&_has_bits_);
          support_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float push_score = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_push_score(&_has_bits_);
          push_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 level_up_times = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_level_up_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_level_up_times(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<189>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inventory_snapshot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool avg_stats_calibrated = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_avg_stats_calibrated(&_has_bits_);
          avg_stats_calibrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_auto_style_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_strange_gem_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_xp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_hero_xp(&_has_bits_);
          hero_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_camps_stacked(&_has_bits_);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_victory_prediction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lane_selection_flags(&_has_bits_);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rampages = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rampages(&_has_bits_);
          rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_triple_kills(&_has_bits_);
          triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 aegis_snatched = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_aegis_snatched(&_has_bits_);
          aegis_snatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rapiers_purchased = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rapiers_purchased(&_has_bits_);
          rapiers_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 couriers_killed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_couriers_killed(&_has_bits_);
          couriers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth_rank = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_net_worth_rank(&_has_bits_);
          net_worth_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_gold_spent = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_support_gold_spent(&_has_bits_);
          support_gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 observer_wards_placed = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_observer_wards_placed(&_has_bits_);
          observer_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sentry_wards_placed = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_sentry_wards_placed(&_has_bits_);
          sentry_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards_dewarded = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_wards_dewarded(&_has_bits_);
          wards_dewarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float stun_duration = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_stun_duration(&_has_bits_);
          stun_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAMMRBoostType_IsValid(val))) {
            _internal_set_rank_mmr_boost_type(static_cast<::EDOTAMMRBoostType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 ability_upgrades = 2;
  for (int i = 0, n = this->_internal_ability_upgrades_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_upgrades(i), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_econ_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_equipped_econ_items(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_kills(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_win_streak(), target);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_best_win_streak(), target);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_fight_score(), target);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_farm_score(), target);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_support_score(), target);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_push_score(), target);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0, n = this->_internal_level_up_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_level_up_times(i), target);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_graph_net_worth(i), target);
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_snapshot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_inventory_snapshot(i), target, stream);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_avg_stats_calibrated(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auto_style_criteria_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_auto_style_criteria(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_event_data(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strange_gem_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_strange_gem_progress(i), target, stream);
  }

  // optional uint32 hero_xp = 31;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_hero_xp(), target);
  }

  // optional uint32 camps_stacked = 32;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_camps_stacked(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_victory_prediction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_victory_prediction(i), target, stream);
  }

  // optional uint32 lane_selection_flags = 34;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_lane_selection_flags(), target);
  }

  // optional uint32 rampages = 35;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_rampages(), target);
  }

  // optional uint32 triple_kills = 36;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_triple_kills(), target);
  }

  // optional uint32 aegis_snatched = 37;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_aegis_snatched(), target);
  }

  // optional uint32 rapiers_purchased = 38;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_rapiers_purchased(), target);
  }

  // optional uint32 couriers_killed = 39;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_couriers_killed(), target);
  }

  // optional uint32 net_worth_rank = 40;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_net_worth_rank(), target);
  }

  // optional uint32 support_gold_spent = 41;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_support_gold_spent(), target);
  }

  // optional uint32 observer_wards_placed = 42;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_observer_wards_placed(), target);
  }

  // optional uint32 sentry_wards_placed = 43;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_sentry_wards_placed(), target);
  }

  // optional uint32 wards_dewarded = 44;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_wards_dewarded(), target);
  }

  // optional float stun_duration = 45;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_stun_duration(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_rank_mmr_boost_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ability_upgrades = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ability_upgrades_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ability_upgrades_size());
    total_size += data_size;
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  total_size += 1UL * this->_internal_equipped_econ_items_size();
  for (const auto& msg : this->equipped_econ_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  total_size += 1UL * this->_internal_kills_size();
  for (const auto& msg : this->kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 level_up_times = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->level_up_times_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_level_up_times_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  total_size += 2UL * this->_internal_inventory_snapshot_size();
  for (const auto& msg : this->inventory_snapshot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  total_size += 2UL * this->_internal_auto_style_criteria_size();
  for (const auto& msg : this->auto_style_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  total_size += 2UL * this->_internal_event_data_size();
  for (const auto& msg : this->event_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  total_size += 2UL * this->_internal_strange_gem_progress_size();
  for (const auto& msg : this->strange_gem_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  total_size += 2UL * this->_internal_victory_prediction_size();
  for (const auto& msg : this->victory_prediction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 avg_kills_x16 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_kills_x16());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 best_assists_x16 = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_assists_x16());
    }

    // optional uint32 best_gpm_x16 = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_xpm_x16());
    }

    // optional uint32 win_streak = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_win_streak());
    }

    // optional uint32 best_win_streak = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_win_streak());
    }

    // optional float fight_score = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float farm_score = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float support_score = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float push_score = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool avg_stats_calibrated = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 hero_xp = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_xp());
    }

    // optional uint32 camps_stacked = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 lane_selection_flags = 34;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 rampages = 35;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rampages());
    }

    // optional uint32 triple_kills = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_triple_kills());
    }

    // optional uint32 aegis_snatched = 37;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aegis_snatched());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 rapiers_purchased = 38;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rapiers_purchased());
    }

    // optional uint32 couriers_killed = 39;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_couriers_killed());
    }

    // optional uint32 net_worth_rank = 40;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth_rank());
    }

    // optional uint32 support_gold_spent = 41;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_gold_spent());
    }

    // optional uint32 observer_wards_placed = 42;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_observer_wards_placed());
    }

    // optional uint32 sentry_wards_placed = 43;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sentry_wards_placed());
    }

    // optional uint32 wards_dewarded = 44;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_dewarded());
    }

    // optional float stun_duration = 45;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rank_mmr_boost_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.Player)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  equipped_econ_items_.MergeFrom(from.equipped_econ_items_);
  kills_.MergeFrom(from.kills_);
  items_.MergeFrom(from.items_);
  level_up_times_.MergeFrom(from.level_up_times_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  inventory_snapshot_.MergeFrom(from.inventory_snapshot_);
  auto_style_criteria_.MergeFrom(from.auto_style_criteria_);
  event_data_.MergeFrom(from.event_data_);
  strange_gem_progress_.MergeFrom(from.strange_gem_progress_);
  victory_prediction_.MergeFrom(from.victory_prediction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000800u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      support_score_ = from.support_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      push_score_ = from.push_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      avg_stats_calibrated_ = from.avg_stats_calibrated_;
    }
    if (cached_has_bits & 0x00040000u) {
      hero_xp_ = from.hero_xp_;
    }
    if (cached_has_bits & 0x00080000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00100000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00400000u) {
      triple_kills_ = from.triple_kills_;
    }
    if (cached_has_bits & 0x00800000u) {
      aegis_snatched_ = from.aegis_snatched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      rapiers_purchased_ = from.rapiers_purchased_;
    }
    if (cached_has_bits & 0x02000000u) {
      couriers_killed_ = from.couriers_killed_;
    }
    if (cached_has_bits & 0x04000000u) {
      net_worth_rank_ = from.net_worth_rank_;
    }
    if (cached_has_bits & 0x08000000u) {
      support_gold_spent_ = from.support_gold_spent_;
    }
    if (cached_has_bits & 0x10000000u) {
      observer_wards_placed_ = from.observer_wards_placed_;
    }
    if (cached_has_bits & 0x20000000u) {
      sentry_wards_placed_ = from.sentry_wards_placed_;
    }
    if (cached_has_bits & 0x40000000u) {
      wards_dewarded_ = from.wards_dewarded_;
    }
    if (cached_has_bits & 0x80000000u) {
      stun_duration_ = from.stun_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_rank_mmr_boost_type()) {
    _internal_set_rank_mmr_boost_type(from._internal_rank_mmr_boost_type());
  }
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player::InternalSwap(CDOTAMatchMetadata_Team_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  equipped_econ_items_.InternalSwap(&other->equipped_econ_items_);
  kills_.InternalSwap(&other->kills_);
  items_.InternalSwap(&other->items_);
  level_up_times_.InternalSwap(&other->level_up_times_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  inventory_snapshot_.InternalSwap(&other->inventory_snapshot_);
  auto_style_criteria_.InternalSwap(&other->auto_style_criteria_);
  event_data_.InternalSwap(&other->event_data_);
  strange_gem_progress_.InternalSwap(&other->strange_gem_progress_);
  victory_prediction_.InternalSwap(&other->victory_prediction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, rank_mmr_boost_type_)
      + sizeof(CDOTAMatchMetadata_Team_Player::rank_mmr_boost_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team>()._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cm_first_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cm_captain_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cm_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  graph_experience_(arena),
  graph_gold_earned_(arena),
  graph_net_worth_(arena),
  cm_bans_(arena),
  cm_picks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team)
}
CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      graph_experience_(from.graph_experience_),
      graph_gold_earned_(from.graph_gold_earned_),
      graph_net_worth_(from.graph_net_worth_),
      cm_bans_(from.cm_bans_),
      cm_picks_(from.cm_picks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team)
}

void CDOTAMatchMetadata_Team::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dota_team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
}

CDOTAMatchMetadata_Team::~CDOTAMatchMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team* _this = reinterpret_cast< CDOTAMatchMetadata_Team* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  graph_experience_.Clear();
  graph_gold_earned_.Clear();
  graph_net_worth_.Clear();
  cm_bans_.Clear();
  cm_picks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cm_penalty_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float graph_experience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_experience(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_experience(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_gold_earned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_gold_earned(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_gold_earned(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cm_first_pick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cm_first_pick(&has_bits);
          cm_first_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cm_captain_player_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cm_captain_player_id(&has_bits);
          cm_captain_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cm_bans = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_bans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_bans(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cm_picks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_picks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_picks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cm_penalty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cm_penalty(&has_bits);
          cm_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  // repeated float graph_experience = 3;
  for (int i = 0, n = this->_internal_graph_experience_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_graph_experience(i), target);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0, n = this->_internal_graph_gold_earned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_graph_gold_earned(i), target);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_graph_net_worth(i), target);
  }

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cm_first_pick(), target);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cm_captain_player_id(), target);
  }

  // repeated uint32 cm_bans = 8;
  for (int i = 0, n = this->_internal_cm_bans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cm_bans(i), target);
  }

  // repeated uint32 cm_picks = 9;
  for (int i = 0, n = this->_internal_cm_picks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cm_picks(i), target);
  }

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cm_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team)
  return target;
}

size_t CDOTAMatchMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_experience = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_experience_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_experience_size());
    total_size += data_size;
  }

  // repeated float graph_gold_earned = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_gold_earned_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_gold_earned_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  // repeated uint32 cm_bans = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_bans_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_bans_size());
    total_size += data_size;
  }

  // repeated uint32 cm_picks = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_picks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_picks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dota_team());
    }

    // optional bool cm_first_pick = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 cm_captain_player_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cm_captain_player_id());
    }

    // optional uint32 cm_penalty = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cm_penalty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team::MergeFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  graph_experience_.MergeFrom(from.graph_experience_);
  graph_gold_earned_.MergeFrom(from.graph_gold_earned_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  cm_bans_.MergeFrom(from.cm_bans_);
  cm_picks_.MergeFrom(from.cm_picks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      cm_first_pick_ = from.cm_first_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      cm_captain_player_id_ = from.cm_captain_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cm_penalty_ = from.cm_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team::CopyFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team::InternalSwap(CDOTAMatchMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  graph_experience_.InternalSwap(&other->graph_experience_);
  graph_gold_earned_.InternalSwap(&other->graph_gold_earned_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  cm_bans_.InternalSwap(&other->cm_bans_);
  cm_picks_.InternalSwap(&other->cm_picks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_penalty_)
      + sizeof(CDOTAMatchMetadata_Team::cm_penalty_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, dota_team_)>(
          reinterpret_cast<char*>(&dota_team_),
          reinterpret_cast<char*>(&other->dota_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_until_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_game_custom_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primary_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgMatchMatchmakingStats& matchmaking_stats(const CDOTAMatchMetadata* msg);
  static void set_has_matchmaking_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgMatchMatchmakingStats&
CDOTAMatchMetadata::_Internal::matchmaking_stats(const CDOTAMatchMetadata* msg) {
  return *msg->matchmaking_stats_;
}
CDOTAMatchMetadata::CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  item_rewards_(arena),
  match_tips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata)
}
CDOTAMatchMetadata::CDOTAMatchMetadata(const CDOTAMatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      item_rewards_(from.item_rewards_),
      match_tips_(from.match_tips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_game_custom_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_game_custom_table()) {
    event_game_custom_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_game_custom_table(), 
      GetArena());
  }
  if (from._internal_has_matchmaking_stats()) {
    matchmaking_stats_ = new ::CMsgMatchMatchmakingStats(*from.matchmaking_stats_);
  } else {
    matchmaking_stats_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_event_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata)
}

void CDOTAMatchMetadata::SharedCtor() {
event_game_custom_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matchmaking_stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&primary_event_id_) -
    reinterpret_cast<char*>(&matchmaking_stats_)) + sizeof(primary_event_id_));
}

CDOTAMatchMetadata::~CDOTAMatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_game_custom_table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete matchmaking_stats_;
}

void CDOTAMatchMetadata::ArenaDtor(void* object) {
  CDOTAMatchMetadata* _this = reinterpret_cast< CDOTAMatchMetadata* >(object);
  (void)_this;
}
void CDOTAMatchMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  item_rewards_.Clear();
  match_tips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_game_custom_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(matchmaking_stats_ != nullptr);
      matchmaking_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_event_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAMatchMetadata.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyTimedRewardDetails item_rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 report_until_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_report_until_time(&has_bits);
          report_until_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes event_game_custom_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_event_game_custom_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 primary_event_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_primary_event_id(&has_bits);
          primary_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgMatchTips match_tips = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaking_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item_rewards(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_report_until_time(), target);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_event_game_custom_table(), target);
  }

  // optional uint32 primary_event_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_primary_event_id(), target);
  }

  // repeated .CMsgMatchTips match_tips = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_match_tips(i), target, stream);
  }

  // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::matchmaking_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata)
  return target;
}

size_t CDOTAMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  total_size += 1UL * this->_internal_item_rewards_size();
  for (const auto& msg : this->item_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchTips match_tips = 7;
  total_size += 1UL * this->_internal_match_tips_size();
  for (const auto& msg : this->match_tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes event_game_custom_table = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_event_game_custom_table());
    }

    // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matchmaking_stats_);
    }

    // optional fixed64 lobby_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 report_until_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 primary_event_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_primary_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata::MergeFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  item_rewards_.MergeFrom(from.item_rewards_);
  match_tips_.MergeFrom(from.match_tips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_game_custom_table(from._internal_event_game_custom_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_matchmaking_stats()->::CMsgMatchMatchmakingStats::MergeFrom(from._internal_matchmaking_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      report_until_time_ = from.report_until_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_event_id_ = from.primary_event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata::CopyFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata::InternalSwap(CDOTAMatchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  item_rewards_.InternalSwap(&other->item_rewards_);
  match_tips_.InternalSwap(&other->match_tips_);
  event_game_custom_table_.Swap(&other->event_game_custom_table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, primary_event_id_)
      + sizeof(CDOTAMatchMetadata::primary_event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, matchmaking_stats_)>(
          reinterpret_cast<char*>(&matchmaking_stats_),
          reinterpret_cast<char*>(&other->matchmaking_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAClientMsg_ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_ChatMessage>()._has_bits_);
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_ChatMessage::CDOTAClientMsg_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_ChatMessage)
}
CDOTAClientMsg_ChatMessage::CDOTAClientMsg_ChatMessage(const CDOTAClientMsg_ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_text()) {
    message_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_text(), 
      GetArena());
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_ChatMessage)
}

void CDOTAClientMsg_ChatMessage::SharedCtor() {
message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_type_ = 0u;
}

CDOTAClientMsg_ChatMessage::~CDOTAClientMsg_ChatMessage() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_ChatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAClientMsg_ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_ChatMessage::ArenaDtor(void* object) {
  CDOTAClientMsg_ChatMessage* _this = reinterpret_cast< CDOTAClientMsg_ChatMessage* >(object);
  (void)_this;
}
void CDOTAClientMsg_ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_text_.ClearNonDefaultToEmpty();
  }
  channel_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_type(&has_bits);
          channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_ChatMessage.message_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAClientMsg_ChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_type(), target);
  }

  // optional string message_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_text().data(), static_cast<int>(this->_internal_message_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_ChatMessage.message_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_ChatMessage)
  return target;
}

size_t CDOTAClientMsg_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_ChatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_text());
    }

    // optional uint32 channel_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientMsg_ChatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientMsg_ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAClientMsg_ChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientMsg_ChatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientMsg_ChatMessage)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatMessage::MergeFrom(const CDOTAClientMsg_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_text(from._internal_message_text());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientMsg_ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatMessage::CopyFrom(const CDOTAClientMsg_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatMessage::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChatMessage::InternalSwap(CDOTAClientMsg_ChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_text_.Swap(&other->message_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_type_, other->channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_ChatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_TipAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_TipAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_TipAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_SplitPlayerConnect* Arena::CreateMaybeMessage< ::CCLCMsg_SplitPlayerConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_SplitPlayerConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EventCNY2015Cmd* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EventCNY2015Cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EventCNY2015Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RankWager* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RankWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RankWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EventPointsTip* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EventPointsTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EventPointsTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_CoinWager* Arena::CreateMaybeMessage< ::CDOTAClientMsg_CoinWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_CoinWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars_CVar* Arena::CreateMaybeMessage< ::CMsg_CVars_CVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars_CVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars* Arena::CreateMaybeMessage< ::CMsg_CVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SetConVar* Arena::CreateMaybeMessage< ::CNETMsg_SetConVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SetConVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_StringCmd* Arena::CreateMaybeMessage< ::CNETMsg_StringCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_StringCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_CoachHUDPing* Arena::CreateMaybeMessage< ::CDOTAMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CoachHUDPing* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_GuideSelectOption* Arena::CreateMaybeMessage< ::CDOTAClientMsg_GuideSelectOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_GuideSelectOption >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_GuideSelected* Arena::CreateMaybeMessage< ::CDOTAClientMsg_GuideSelected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_GuideSelected >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_CmdKeyValues* Arena::CreateMaybeMessage< ::CCLCMsg_CmdKeyValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_CmdKeyValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_FileCRCCheck* Arena::CreateMaybeMessage< ::CCLCMsg_FileCRCCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_FileCRCCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_ClientMessage* Arena::CreateMaybeMessage< ::CCLCMsg_ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_MatchMetadata* Arena::CreateMaybeMessage< ::CDOTAClientMsg_MatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_MatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemAttribute* Arena::CreateMaybeMessage< ::CSOEconItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemEquipped* Arena::CreateMaybeMessage< ::CSOEconItemEquipped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemEquipped >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItem* Arena::CreateMaybeMessage< ::CSOEconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage< ::CLobbyTimedRewardDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyTimedRewardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchTips_SingleTip* Arena::CreateMaybeMessage< ::CMsgMatchTips_SingleTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchTips_SingleTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchTips* Arena::CreateMaybeMessage< ::CMsgMatchTips >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchTips >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMatchmakingStats* Arena::CreateMaybeMessage< ::CMsgMatchMatchmakingStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMatchmakingStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_PlayerKill* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_PlayerKill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_PlayerKill >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ItemPurchase* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_InventorySnapshot* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_InventorySnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_InventorySnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_AutoStyleCriteria* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_StrangeGemProgress* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_VictoryPrediction* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_VictoryPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_VictoryPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_SubChallenge* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_SubChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_SubChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_CavernChallengeResult* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ActionGrant* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ActionGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ActionGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_EventData* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_EventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_EventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_Player* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_ChatMessage* Arena::CreateMaybeMessage< ::CDOTAClientMsg_ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_ChatMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
